%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: csip.pdf
%%Creator: Adobe Acrobat 10.1.3
%%For: ZLC
%%CreationDate: 2012/12/17, 11:51:57
%%BoundingBox: 0 0 295 193
%%HiResBoundingBox: 0 0 295 193
%%CropBox: 0 0 295 193
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 897 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="MiKTeX GPL Ghostscript  9.0"
   xmp:ModifyDate="2012-07-19T16:13:59-04:00"
   xmp:CreateDate="2012-07-19T16:13:59-04:00"
   xmp:CreatorTool="FreeHand 8.0"
   xmpMM:DocumentID="c6239a58-d439-11e1-0000-59190693ab9f"
   xmpMM:InstanceID="c6239a58-d439-11e1-0000-59190693ab9f"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">csip.EPS</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (PANTONE 540 CVC)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/ColorLookup [
[0 0 0 0][.00392157 .00184314 0 .00184314][.00784314 .00368627 0 .00368627][.0117647 .00552941 0 .00552941]
[.0156863 .00737255 0 .00737255][.0196078 .00921569 0 .00921569][.0235294 .0110588 0 .0110588][.027451 .012902 0 .012902]
[.0313725 .0147451 0 .0147451][.0352941 .0165882 0 .0165882][.0392157 .0184314 0 .0184314][.0431373 .0202745 0 .0202745]
[.0470588 .0221176 0 .0221176][.0509804 .0239608 0 .0239608][.054902 .0258039 0 .0258039][.0588235 .0276471 0 .0276471]
[.0627451 .0294902 0 .0294902][.0666667 .0313333 0 .0313333][.0705882 .0331765 0 .0331765][.0745098 .0350196 0 .0350196]
[.0784314 .0368627 0 .0368627][.0823529 .0387059 0 .0387059][.0862745 .040549 0 .040549][.0901961 .0423922 0 .0423922]
[.0941176 .0442353 0 .0442353][.0980392 .0460784 0 .0460784][.101961 .0479216 0 .0479216][.105882 .0497647 0 .0497647]
[.109804 .0516078 0 .0516078][.113725 .053451 0 .053451][.117647 .0552941 0 .0552941][.121569 .0571373 0 .0571373]
[.12549 .0589804 0 .0589804][.129412 .0608235 0 .0608235][.133333 .0626667 0 .0626667][.137255 .0645098 0 .0645098]
[.141176 .0663529 0 .0663529][.145098 .0681961 0 .0681961][.14902 .0700392 0 .0700392][.152941 .0718823 0 .0718823]
[.156863 .0737255 0 .0737255][.160784 .0755686 0 .0755686][.164706 .0774118 0 .0774118][.168627 .0792549 0 .0792549]
[.172549 .081098 0 .081098][.176471 .0829412 0 .0829412][.180392 .0847843 0 .0847843][.184314 .0866274 0 .0866274]
[.188235 .0884706 0 .0884706][.192157 .0903137 0 .0903137][.196078 .0921568 0 .0921568][.2 .094 0 .094]
[.203922 .0958431 0 .0958431][.207843 .0976863 0 .0976863][.211765 .0995294 0 .0995294][.215686 .101373 0 .101373]
[.219608 .103216 0 .103216][.223529 .105059 0 .105059][.227451 .106902 0 .106902][.231373 .108745 0 .108745]
[.235294 .110588 0 .110588][.239216 .112431 0 .112431][.243137 .114275 0 .114275][.247059 .116118 0 .116118]
[.25098 .117961 0 .117961][.254902 .119804 0 .119804][.258824 .121647 0 .121647][.262745 .12349 0 .12349]
[.266667 .125333 0 .125333][.270588 .127176 0 .127176][.27451 .12902 0 .12902][.278431 .130863 0 .130863]
[.282353 .132706 0 .132706][.286274 .134549 0 .134549][.290196 .136392 0 .136392][.294118 .138235 0 .138235]
[.298039 .140078 0 .140078][.301961 .141922 0 .141922][.305882 .143765 0 .143765][.309804 .145608 0 .145608]
[.313725 .147451 0 .147451][.317647 .149294 0 .149294][.321569 .151137 0 .151137][.32549 .15298 0 .15298]
[.329412 .154824 0 .154824][.333333 .156667 0 .156667][.337255 .15851 0 .15851][.341176 .160353 0 .160353]
[.345098 .162196 0 .162196][.34902 .164039 0 .164039][.352941 .165882 0 .165882][.356863 .167725 0 .167725]
[.360784 .169569 0 .169569][.364706 .171412 0 .171412][.368627 .173255 0 .173255][.372549 .175098 0 .175098]
[.376471 .176941 0 .176941][.380392 .178784 0 .178784][.384314 .180627 0 .180627][.388235 .182471 0 .182471]
[.392157 .184314 0 .184314][.396078 .186157 0 .186157][.4 .188 0 .188][.403922 .189843 0 .189843]
[.407843 .191686 0 .191686][.411765 .193529 0 .193529][.415686 .195373 0 .195373][.419608 .197216 0 .197216]
[.423529 .199059 0 .199059][.427451 .200902 0 .200902][.431373 .202745 0 .202745][.435294 .204588 0 .204588]
[.439216 .206431 0 .206431][.443137 .208274 0 .208274][.447059 .210118 0 .210118][.45098 .211961 0 .211961]
[.454902 .213804 0 .213804][.458824 .215647 0 .215647][.462745 .21749 0 .21749][.466667 .219333 0 .219333]
[.470588 .221176 0 .221176][.47451 .22302 0 .22302][.478431 .224863 0 .224863][.482353 .226706 0 .226706]
[.486274 .228549 0 .228549][.490196 .230392 0 .230392][.494118 .232235 0 .232235][.498039 .234078 0 .234078]
[.501961 .235922 0 .235922][.505882 .237765 0 .237765][.509804 .239608 0 .239608][.513725 .241451 0 .241451]
[.517647 .243294 0 .243294][.521569 .245137 0 .245137][.52549 .24698 0 .24698][.529412 .248824 0 .248824]
[.533333 .250667 0 .250667][.537255 .25251 0 .25251][.541176 .254353 0 .254353][.545098 .256196 0 .256196]
[.54902 .258039 0 .258039][.552941 .259882 0 .259882][.556863 .261725 0 .261725][.560784 .263569 0 .263569]
[.564706 .265412 0 .265412][.568627 .267255 0 .267255][.572549 .269098 0 .269098][.576471 .270941 0 .270941]
[.580392 .272784 0 .272784][.584314 .274627 0 .274627][.588235 .276471 0 .276471][.592157 .278314 0 .278314]
[.596078 .280157 0 .280157][.6 .282 0 .282][.603922 .283843 0 .283843][.607843 .285686 0 .285686]
[.611765 .287529 0 .287529][.615686 .289373 0 .289373][.619608 .291216 0 .291216][.623529 .293059 0 .293059]
[.627451 .294902 0 .294902][.631373 .296745 0 .296745][.635294 .298588 0 .298588][.639216 .300431 0 .300431]
[.643137 .302274 0 .302274][.647059 .304118 0 .304118][.65098 .305961 0 .305961][.654902 .307804 0 .307804]
[.658823 .309647 0 .309647][.662745 .31149 0 .31149][.666667 .313333 0 .313333][.670588 .315176 0 .315176]
[.67451 .31702 0 .31702][.678431 .318863 0 .318863][.682353 .320706 0 .320706][.686274 .322549 0 .322549]
[.690196 .324392 0 .324392][.694118 .326235 0 .326235][.698039 .328078 0 .328078][.701961 .329922 0 .329922]
[.705882 .331765 0 .331765][.709804 .333608 0 .333608][.713725 .335451 0 .335451][.717647 .337294 0 .337294]
[.721569 .339137 0 .339137][.72549 .34098 0 .34098][.729412 .342824 0 .342824][.733333 .344667 0 .344667]
[.737255 .34651 0 .34651][.741176 .348353 0 .348353][.745098 .350196 0 .350196][.74902 .352039 0 .352039]
[.752941 .353882 0 .353882][.756863 .355725 0 .355725][.760784 .357569 0 .357569][.764706 .359412 0 .359412]
[.768627 .361255 0 .361255][.772549 .363098 0 .363098][.776471 .364941 0 .364941][.780392 .366784 0 .366784]
[.784314 .368627 0 .368627][.788235 .370471 0 .370471][.792157 .372314 0 .372314][.796078 .374157 0 .374157]
[.8 .376 0 .376][.803922 .377843 0 .377843][.807843 .379686 0 .379686][.811765 .381529 0 .381529]
[.815686 .383373 0 .383373][.819608 .385216 0 .385216][.823529 .387059 0 .387059][.827451 .388902 0 .388902]
[.831372 .390745 0 .390745][.835294 .392588 0 .392588][.839216 .394431 0 .394431][.843137 .396274 0 .396274]
[.847059 .398118 0 .398118][.85098 .399961 0 .399961][.854902 .401804 0 .401804][.858823 .403647 0 .403647]
[.862745 .40549 0 .40549][.866667 .407333 0 .407333][.870588 .409176 0 .409176][.87451 .41102 0 .41102]
[.878431 .412863 0 .412863][.882353 .414706 0 .414706][.886274 .416549 0 .416549][.890196 .418392 0 .418392]
[.894118 .420235 0 .420235][.898039 .422078 0 .422078][.901961 .423922 0 .423922][.905882 .425765 0 .425765]
[.909804 .427608 0 .427608][.913725 .429451 0 .429451][.917647 .431294 0 .431294][.921569 .433137 0 .433137]
[.92549 .43498 0 .43498][.929412 .436823 0 .436823][.933333 .438667 0 .438667][.937255 .44051 0 .44051]
[.941176 .442353 0 .442353][.945098 .444196 0 .444196][.94902 .446039 0 .446039][.952941 .447882 0 .447882]
[.956863 .449725 0 .449725][.960784 .451569 0 .451569][.964706 .453412 0 .453412][.968627 .455255 0 .455255]
[.972549 .457098 0 .457098][.976471 .458941 0 .458941][.980392 .460784 0 .460784][.984314 .462627 0 .462627]
[.988235 .464471 0 .464471][.992157 .466314 0 .466314][.996078 .468157 0 .468157][1 .47 0 .47]
]
>>
/CSD add_res
/1 
<<
/Name (PANTONE 123 CVC)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/ColorLookup [
[0 0 0 0][0 .00119608 .00368627 0][0 .00239216 .00737255 0][0 .00358824 .0110588 0]
[0 .00478431 .0147451 0][0 .00598039 .0184314 0][0 .00717647 .0221176 0][0 .00837255 .0258039 0]
[0 .00956863 .0294902 0][0 .0107647 .0331765 0][0 .0119608 .0368627 0][0 .0131569 .040549 0]
[0 .0143529 .0442353 0][0 .015549 .0479216 0][0 .0167451 .0516078 0][0 .0179412 .0552941 0]
[0 .0191373 .0589804 0][0 .0203333 .0626667 0][0 .0215294 .0663529 0][0 .0227255 .0700392 0]
[0 .0239216 .0737255 0][0 .0251176 .0774118 0][0 .0263137 .081098 0][0 .0275098 .0847843 0]
[0 .0287059 .0884706 0][0 .029902 .0921568 0][0 .031098 .0958431 0][0 .0322941 .0995294 0]
[0 .0334902 .103216 0][0 .0346863 .106902 0][0 .0358824 .110588 0][0 .0370784 .114275 0]
[0 .0382745 .117961 0][0 .0394706 .121647 0][0 .0406667 .125333 0][0 .0418627 .12902 0]
[0 .0430588 .132706 0][0 .0442549 .136392 0][0 .045451 .140078 0][0 .0466471 .143765 0]
[0 .0478431 .147451 0][0 .0490392 .151137 0][0 .0502353 .154824 0][0 .0514314 .15851 0]
[0 .0526274 .162196 0][0 .0538235 .165882 0][0 .0550196 .169569 0][0 .0562157 .173255 0]
[0 .0574118 .176941 0][0 .0586078 .180627 0][0 .0598039 .184314 0][0 .061 .188 0]
[0 .0621961 .191686 0][0 .0633921 .195373 0][0 .0645882 .199059 0][0 .0657843 .202745 0]
[0 .0669804 .206431 0][0 .0681765 .210118 0][0 .0693725 .213804 0][0 .0705686 .21749 0]
[0 .0717647 .221176 0][0 .0729608 .224863 0][0 .0741569 .228549 0][0 .0753529 .232235 0]
[0 .076549 .235922 0][0 .0777451 .239608 0][0 .0789412 .243294 0][0 .0801372 .24698 0]
[0 .0813333 .250667 0][0 .0825294 .254353 0][0 .0837255 .258039 0][0 .0849216 .261725 0]
[0 .0861176 .265412 0][0 .0873137 .269098 0][0 .0885098 .272784 0][0 .0897059 .276471 0]
[0 .090902 .280157 0][0 .092098 .283843 0][0 .0932941 .287529 0][0 .0944902 .291216 0]
[0 .0956863 .294902 0][0 .0968823 .298588 0][0 .0980784 .302274 0][0 .0992745 .305961 0]
[0 .100471 .309647 0][0 .101667 .313333 0][0 .102863 .31702 0][0 .104059 .320706 0]
[0 .105255 .324392 0][0 .106451 .328078 0][0 .107647 .331765 0][0 .108843 .335451 0]
[0 .110039 .339137 0][0 .111235 .342824 0][0 .112431 .34651 0][0 .113627 .350196 0]
[0 .114824 .353882 0][0 .11602 .357569 0][0 .117216 .361255 0][0 .118412 .364941 0]
[0 .119608 .368627 0][0 .120804 .372314 0][0 .122 .376 0][0 .123196 .379686 0]
[0 .124392 .383373 0][0 .125588 .387059 0][0 .126784 .390745 0][0 .12798 .394431 0]
[0 .129176 .398118 0][0 .130373 .401804 0][0 .131569 .40549 0][0 .132765 .409176 0]
[0 .133961 .412863 0][0 .135157 .416549 0][0 .136353 .420235 0][0 .137549 .423922 0]
[0 .138745 .427608 0][0 .139941 .431294 0][0 .141137 .43498 0][0 .142333 .438667 0]
[0 .143529 .442353 0][0 .144725 .446039 0][0 .145922 .449725 0][0 .147118 .453412 0]
[0 .148314 .457098 0][0 .14951 .460784 0][0 .150706 .464471 0][0 .151902 .468157 0]
[0 .153098 .471843 0][0 .154294 .475529 0][0 .15549 .479216 0][0 .156686 .482902 0]
[0 .157882 .486588 0][0 .159078 .490274 0][0 .160274 .493961 0][0 .161471 .497647 0]
[0 .162667 .501333 0][0 .163863 .50502 0][0 .165059 .508706 0][0 .166255 .512392 0]
[0 .167451 .516078 0][0 .168647 .519765 0][0 .169843 .523451 0][0 .171039 .527137 0]
[0 .172235 .530823 0][0 .173431 .53451 0][0 .174627 .538196 0][0 .175824 .541882 0]
[0 .17702 .545569 0][0 .178216 .549255 0][0 .179412 .552941 0][0 .180608 .556627 0]
[0 .181804 .560314 0][0 .183 .564 0][0 .184196 .567686 0][0 .185392 .571373 0]
[0 .186588 .575059 0][0 .187784 .578745 0][0 .18898 .582431 0][0 .190176 .586118 0]
[0 .191373 .589804 0][0 .192569 .59349 0][0 .193765 .597176 0][0 .194961 .600863 0]
[0 .196157 .604549 0][0 .197353 .608235 0][0 .198549 .611921 0][0 .199745 .615608 0]
[0 .200941 .619294 0][0 .202137 .62298 0][0 .203333 .626667 0][0 .204529 .630353 0]
[0 .205725 .634039 0][0 .206922 .637725 0][0 .208118 .641412 0][0 .209314 .645098 0]
[0 .21051 .648784 0][0 .211706 .652471 0][0 .212902 .656157 0][0 .214098 .659843 0]
[0 .215294 .663529 0][0 .21649 .667216 0][0 .217686 .670902 0][0 .218882 .674588 0]
[0 .220078 .678274 0][0 .221274 .681961 0][0 .222471 .685647 0][0 .223667 .689333 0]
[0 .224863 .69302 0][0 .226059 .696706 0][0 .227255 .700392 0][0 .228451 .704078 0]
[0 .229647 .707765 0][0 .230843 .711451 0][0 .232039 .715137 0][0 .233235 .718823 0]
[0 .234431 .72251 0][0 .235627 .726196 0][0 .236824 .729882 0][0 .23802 .733569 0]
[0 .239216 .737255 0][0 .240412 .740941 0][0 .241608 .744627 0][0 .242804 .748314 0]
[0 .244 .752 0][0 .245196 .755686 0][0 .246392 .759372 0][0 .247588 .763059 0]
[0 .248784 .766745 0][0 .24998 .770431 0][0 .251176 .774118 0][0 .252373 .777804 0]
[0 .253569 .78149 0][0 .254765 .785176 0][0 .255961 .788863 0][0 .257157 .792549 0]
[0 .258353 .796235 0][0 .259549 .799922 0][0 .260745 .803608 0][0 .261941 .807294 0]
[0 .263137 .81098 0][0 .264333 .814667 0][0 .265529 .818353 0][0 .266725 .822039 0]
[0 .267922 .825725 0][0 .269118 .829412 0][0 .270314 .833098 0][0 .27151 .836784 0]
[0 .272706 .84047 0][0 .273902 .844157 0][0 .275098 .847843 0][0 .276294 .851529 0]
[0 .27749 .855216 0][0 .278686 .858902 0][0 .279882 .862588 0][0 .281078 .866274 0]
[0 .282274 .869961 0][0 .283471 .873647 0][0 .284667 .877333 0][0 .285863 .88102 0]
[0 .287059 .884706 0][0 .288255 .888392 0][0 .289451 .892078 0][0 .290647 .895765 0]
[0 .291843 .899451 0][0 .293039 .903137 0][0 .294235 .906823 0][0 .295431 .91051 0]
[0 .296627 .914196 0][0 .297824 .917882 0][0 .29902 .921569 0][0 .300216 .925255 0]
[0 .301412 .928941 0][0 .302608 .932627 0][0 .303804 .936314 0][0 .305 .94 0]
]
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -193 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193 li
295 193 li
295 0 li
cp
clp
1.3168 lw
0 lc
0 lj
3.86371 ml
[] 0 dsh
true sadj
287.82 95.257 mo
270.638 106.07 258.352 74.984 242.179 74.984 cv
231.971 74.984 214.29 103.033 200.256 103.033 cv
176.568 103.033 170.176 28.304 149.214 29.79 cv
128.253 28.304 120.77 103.033 97.0828 103.033 cv
83.048 103.033 65.3672 74.984 55.1594 74.984 cv
40.1516 74.984 28.5293 101.755 13.2121 96.9684 cv
false sop
1 /1 /CSD get_res sepcs
1 sep
@
284.679 106.225 mo
269.1 111.758 257.349 84.407 242.179 84.407 cv
231.971 84.407 214.29 112.456 200.256 112.456 cv
176.568 112.456 170.176 37.727 149.214 39.212 cv
128.253 37.727 120.77 112.456 97.0828 112.456 cv
83.048 112.456 65.3672 84.407 55.1594 84.407 cv
39.3254 84.407 27.2602 114.206 10.6484 105.304 cv
@
242.734 112.687 mo
242.179 112.675 li
231.971 112.675 214.29 140.724 200.256 140.724 cv
176.568 140.724 170.176 65.995 149.214 67.48 cv
128.253 65.995 120.77 140.724 97.0828 140.724 cv
83.048 140.724 65.3672 112.675 55.1594 112.675 cv
41.243 112.675 30.2379 135.693 16.4988 135.225 cv
@
242.734 122.11 mo
242.179 122.097 li
231.971 122.097 214.29 150.146 200.256 150.146 cv
176.568 150.146 170.176 75.418 149.214 76.903 cv
128.253 75.418 120.77 150.146 97.0828 150.146 cv
83.048 150.146 65.3672 122.097 55.1594 122.097 cv
42.1625 122.097 31.7043 142.175 19.1867 144.446 cv
@
242.734 131.532 mo
242.179 131.52 li
231.971 131.52 214.29 159.569 200.256 159.569 cv
176.568 159.569 170.176 84.84 149.214 86.326 cv
128.253 84.84 120.77 159.569 97.0828 159.569 cv
83.048 159.569 65.3672 131.52 55.1594 131.52 cv
43.0512 131.52 33.1469 148.945 21.7281 153.165 cv
@
286.418 67.795 mo
269.967 76.098 257.902 46.716 242.179 46.716 cv
231.971 46.716 214.29 74.765 200.256 74.765 cv
176.568 74.765 170.176 .0370026 149.214 1.522 cv
128.253 .0370026 120.77 74.765 97.0828 74.765 cv
83.048 74.765 65.3672 46.716 55.1594 46.716 cv
43.1648 46.716 33.3328 63.816 22.0488 68.239 cv
@
290.051 74.806 mo
271.689 89.915 259.037 56.139 242.179 56.139 cv
231.971 56.139 214.29 84.188 200.256 84.188 cv
176.568 84.188 170.176 9.459 149.214 10.945 cv
128.253 9.459 120.77 84.188 97.0828 84.188 cv
83.048 84.188 65.3672 56.139 55.1594 56.139 cv
42.0566 56.139 31.534 76.545 18.8805 78.54 cv
@
293.307 81.089 mo
273.143 103.371 260.015 65.561 242.179 65.561 cv
231.971 65.561 214.29 93.6105 200.256 93.6105 cv
176.568 93.6105 170.176 18.882 149.214 20.367 cv
128.253 18.882 120.77 93.6105 97.0828 93.6105 cv
83.048 93.6105 65.3672 65.561 55.1594 65.561 cv
41.057 65.561 29.9438 89.199 15.9461 88.08 cv
@
242.734 140.955 mo
242.179 140.943 li
231.971 140.943 214.29 168.992 200.256 168.992 cv
176.568 168.992 170.176 94.2629 149.214 95.748 cv
128.253 94.2629 120.77 168.992 97.0828 168.992 cv
83.048 168.992 65.3672 140.943 55.1594 140.943 cv
44.8266 140.943 36.0988 153.632 26.6648 159.976 cv
@
201.277 181.093 mo
201.243 181.616 201.196 182.418 201.196 182.672 cv
201.196 184.019 201.384 185.018 201.759 185.668 cv
202.188 186.406 202.784 186.775 203.549 186.775 cv
204.072 186.775 204.528 186.634 204.916 186.352 cv
205.312 186.071 205.614 185.662 205.821 185.125 cv
206.264 185.125 li
206.07 185.769 205.714 186.285 205.198 186.674 cv
204.615 187.103 203.954 187.317 203.217 187.318 cv
202.305 187.318 201.501 186.979 200.804 186.302 cv
199.939 185.464 199.507 184.332 199.507 182.903 cv
199.507 181.576 199.875 180.469 200.613 179.585 cv
201.29 178.767 202.131 178.358 203.137 178.358 cv
204.002 178.358 204.729 178.657 205.319 179.253 cv
205.915 179.85 206.23 180.6 206.264 181.505 cv
201.25 181.505 li
201.276 181.093 li
204.665 181.093 li
204.686 180.946 204.695 180.805 204.695 180.671 cv
204.695 180.115 204.548 179.666 204.253 179.323 cv
203.958 178.975 203.572 178.801 203.096 178.801 cv
202.466 178.801 201.98 179.109 201.639 179.726 cv
201.478 180.001 201.357 180.457 201.277 181.093 cv
1 /0 /CSD get_res sepcs
1 sep
ef
.072 lw
3.86369 ml
201.277 181.093 mo
201.243 181.616 201.196 182.418 201.196 182.672 cv
201.196 184.019 201.384 185.018 201.759 185.668 cv
202.188 186.406 202.784 186.775 203.549 186.775 cv
204.072 186.775 204.528 186.634 204.916 186.352 cv
205.312 186.071 205.614 185.662 205.821 185.125 cv
206.264 185.125 li
206.07 185.769 205.714 186.285 205.198 186.674 cv
204.615 187.103 203.954 187.317 203.217 187.318 cv
202.305 187.318 201.501 186.979 200.804 186.302 cv
199.939 185.464 199.507 184.332 199.507 182.903 cv
199.507 181.576 199.875 180.469 200.613 179.585 cv
201.29 178.767 202.131 178.358 203.137 178.358 cv
204.002 178.358 204.729 178.657 205.319 179.253 cv
205.915 179.85 206.23 180.6 206.264 181.505 cv
201.25 181.505 li
201.276 181.093 li
204.665 181.093 li
204.686 180.946 204.695 180.805 204.695 180.671 cv
204.695 180.115 204.548 179.666 204.253 179.323 cv
203.958 178.975 203.572 178.801 203.096 178.801 cv
202.466 178.801 201.98 179.109 201.639 179.726 cv
201.478 180.001 201.357 180.457 201.277 181.093 cv
cp
@
13.8164 181.837 mo
14.2086 181.837 li
14.2086 186.644 li
13.8164 186.644 li
13.7156 186.081 13.518 185.598 13.223 185.196 cv
12.1172 186.557 10.7293 187.237 9.06016 187.237 cv
7.19648 187.237 5.69805 186.563 4.56523 185.216 cv
3.5125 183.962 2.98672 182.347 2.98672 180.369 cv
2.98672 178.365 3.49609 176.649 4.51523 175.221 cv
5.0043 174.551 5.63789 174.014 6.41563 173.612 cv
7.20664 173.203 8.08125 172.999 9.04023 172.999 cv
9.85781 172.999 10.6418 173.183 11.393 173.552 cv
12.1438 173.914 12.7535 174.406 13.223 175.03 cv
13.491 174.473 13.652 173.884 13.7059 173.26 cv
14.1078 173.26 li
14.2086 178.459 li
13.8164 178.459 li
13.6352 177.192 13.3266 176.193 12.8914 175.462 cv
12.5223 174.846 12.0129 174.363 11.3629 174.014 cv
10.7461 173.686 10.1125 173.522 9.4625 173.521 cv
8.55742 173.521 7.77305 173.827 7.10938 174.436 cv
6.46602 175.02 5.98984 175.905 5.68164 177.091 cv
5.4332 178.05 5.30938 179.119 5.30938 180.299 cv
5.30938 182.297 5.72188 183.886 6.54609 185.065 cv
6.89492 185.561 7.33711 185.954 7.87383 186.242 cv
8.40977 186.523 8.96953 186.664 9.55313 186.664 cv
10.3906 186.664 11.1883 186.396 11.9461 185.859 cv
12.4086 185.531 12.8109 184.995 13.1527 184.251 cv
13.5012 183.507 13.7223 182.702 13.8164 181.837 cv
f
13.8164 181.837 mo
14.2086 181.837 li
14.2086 186.644 li
13.8164 186.644 li
13.7156 186.081 13.518 185.598 13.223 185.196 cv
12.1172 186.557 10.7293 187.237 9.06016 187.237 cv
7.19648 187.237 5.69805 186.563 4.56523 185.216 cv
3.5125 183.962 2.98672 182.347 2.98672 180.369 cv
2.98672 178.365 3.49609 176.649 4.51523 175.221 cv
5.0043 174.551 5.63789 174.014 6.41563 173.612 cv
7.20664 173.203 8.08125 172.999 9.04023 172.999 cv
9.85781 172.999 10.6418 173.183 11.393 173.552 cv
12.1438 173.914 12.7535 174.406 13.223 175.03 cv
13.491 174.473 13.652 173.884 13.7059 173.26 cv
14.1078 173.26 li
14.2086 178.459 li
13.8164 178.459 li
13.6352 177.192 13.3266 176.193 12.8914 175.462 cv
12.5223 174.846 12.0129 174.363 11.3629 174.014 cv
10.7461 173.686 10.1125 173.522 9.4625 173.521 cv
8.55742 173.521 7.77305 173.827 7.10938 174.436 cv
6.46602 175.02 5.98984 175.905 5.68164 177.091 cv
5.4332 178.05 5.30938 179.119 5.30938 180.299 cv
5.30938 182.297 5.72188 183.886 6.54609 185.065 cv
6.89492 185.561 7.33711 185.954 7.87383 186.242 cv
8.40977 186.523 8.96953 186.664 9.55313 186.664 cv
10.3906 186.664 11.1883 186.396 11.9461 185.859 cv
12.4086 185.531 12.8109 184.995 13.1527 184.251 cv
13.5012 183.507 13.7223 182.702 13.8164 181.837 cv
cp
@
26.8637 178.358 mo
27.1352 178.358 li
27.202 178.546 27.2625 178.804 27.316 179.132 cv
27.3695 179.454 27.3996 179.766 27.4066 180.068 cv
28.2715 178.928 29.2367 178.358 30.3027 178.358 cv
31.268 178.358 31.9418 178.714 32.3238 179.424 cv
32.4574 179.672 32.5414 179.927 32.575 180.188 cv
32.6156 180.443 32.6355 180.895 32.6355 181.546 cv
32.6355 184.14 li
32.6355 184.958 32.6387 185.464 32.6453 185.658 cv
32.6586 185.846 32.6957 186 32.7563 186.121 cv
32.8969 186.396 33.2016 186.53 33.6711 186.523 cv
33.7816 186.523 li
33.7816 186.986 li
29.9707 186.986 li
29.9707 186.523 li
30.1316 186.523 li
30.6145 186.53 30.9262 186.396 31.0668 186.121 cv
31.1273 186 31.1605 185.866 31.1676 185.719 cv
31.1742 185.564 31.1805 185.039 31.1875 184.14 cv
31.1875 181.465 li
31.1875 180.869 31.1742 180.477 31.1473 180.289 cv
31.1273 180.094 31.0668 179.903 30.9664 179.716 cv
30.7113 179.233 30.2992 178.992 29.7293 178.992 cv
28.8715 178.992 28.0969 179.582 27.4066 180.761 cv
27.4066 184.14 li
27.4066 184.964 27.4098 185.471 27.4168 185.658 cv
27.4301 185.846 27.4668 186 27.5273 186.121 cv
27.668 186.396 27.9797 186.53 28.4625 186.523 cv
28.5629 186.523 li
28.5629 186.986 li
24.7922 186.986 li
24.7922 186.523 li
24.923 186.523 li
25.3922 186.53 25.6969 186.396 25.8379 186.121 cv
25.8984 186 25.9316 185.846 25.9387 185.658 cv
25.9516 185.464 25.9582 184.958 25.9586 184.14 cv
25.9586 181.677 li
25.9586 180.859 25.9516 180.352 25.9387 180.158 cv
25.9316 179.964 25.8984 179.806 25.8379 179.685 cv
25.7039 179.418 25.3957 179.287 24.9129 179.293 cv
24.7922 179.293 li
24.7922 178.831 li
25.4559 178.744 26.1465 178.586 26.8637 178.358 cv
f
26.8637 178.358 mo
27.1352 178.358 li
27.202 178.546 27.2625 178.804 27.316 179.132 cv
27.3695 179.454 27.3996 179.766 27.4066 180.068 cv
28.2715 178.928 29.2367 178.358 30.3027 178.358 cv
31.268 178.358 31.9418 178.714 32.3238 179.424 cv
32.4574 179.672 32.5414 179.927 32.575 180.188 cv
32.6156 180.443 32.6355 180.895 32.6355 181.546 cv
32.6355 184.14 li
32.6355 184.958 32.6387 185.464 32.6453 185.658 cv
32.6586 185.846 32.6957 186 32.7563 186.121 cv
32.8969 186.396 33.2016 186.53 33.6711 186.523 cv
33.7816 186.523 li
33.7816 186.986 li
29.9707 186.986 li
29.9707 186.523 li
30.1316 186.523 li
30.6145 186.53 30.9262 186.396 31.0668 186.121 cv
31.1273 186 31.1605 185.866 31.1676 185.719 cv
31.1742 185.564 31.1805 185.039 31.1875 184.14 cv
31.1875 181.465 li
31.1875 180.869 31.1742 180.477 31.1473 180.289 cv
31.1273 180.094 31.0668 179.903 30.9664 179.716 cv
30.7113 179.233 30.2992 178.992 29.7293 178.992 cv
28.8715 178.992 28.0969 179.582 27.4066 180.761 cv
27.4066 184.14 li
27.4066 184.964 27.4098 185.471 27.4168 185.658 cv
27.4301 185.846 27.4668 186 27.5273 186.121 cv
27.668 186.396 27.9797 186.53 28.4625 186.523 cv
28.5629 186.523 li
28.5629 186.986 li
24.7922 186.986 li
24.7922 186.523 li
24.923 186.523 li
25.3922 186.53 25.6969 186.396 25.8379 186.121 cv
25.8984 186 25.9316 185.846 25.9387 185.658 cv
25.9516 185.464 25.9582 184.958 25.9586 184.14 cv
25.9586 181.677 li
25.9586 180.859 25.9516 180.352 25.9387 180.158 cv
25.9316 179.964 25.8984 179.806 25.8379 179.685 cv
25.7039 179.418 25.3957 179.287 24.9129 179.293 cv
24.7922 179.293 li
24.7922 178.831 li
25.4559 178.744 26.1465 178.586 26.8637 178.358 cv
cp
@
39.5965 179.152 mo
37.4145 179.152 li
37.4145 184.17 li
37.4145 185.095 37.4715 185.692 37.5855 185.96 cv
37.773 186.396 38.0746 186.614 38.4906 186.614 cv
38.8992 186.614 39.268 186.336 39.5965 185.779 cv
39.8781 185.97 li
39.6973 186.386 39.4285 186.714 39.0738 186.955 cv
38.7184 187.197 38.3297 187.318 37.907 187.318 cv
37.5586 187.318 37.2301 187.223 36.9219 187.036 cv
36.6199 186.848 36.3953 186.6 36.248 186.292 cv
36.1273 186.044 36.05 185.769 36.0168 185.467 cv
35.9832 185.166 35.9664 184.626 35.9664 183.848 cv
35.9664 179.152 li
34.9609 179.152 li
34.9609 178.69 li
35.5105 178.663 35.973 178.422 36.3488 177.966 cv
36.7238 177.51 36.9719 176.887 37.0926 176.096 cv
37.4145 176.096 li
37.4145 178.69 li
39.5965 178.69 li
39.5965 179.152 li
f
39.5965 179.152 mo
37.4145 179.152 li
37.4145 184.17 li
37.4145 185.095 37.4715 185.692 37.5855 185.96 cv
37.773 186.396 38.0746 186.614 38.4906 186.614 cv
38.8992 186.614 39.268 186.336 39.5965 185.779 cv
39.8781 185.97 li
39.6973 186.386 39.4285 186.714 39.0738 186.955 cv
38.7184 187.197 38.3297 187.318 37.907 187.318 cv
37.5586 187.318 37.2301 187.223 36.9219 187.036 cv
36.6199 186.848 36.3953 186.6 36.248 186.292 cv
36.1273 186.044 36.05 185.769 36.0168 185.467 cv
35.9832 185.166 35.9664 184.626 35.9664 183.848 cv
35.9664 179.152 li
34.9609 179.152 li
34.9609 178.69 li
35.5105 178.663 35.973 178.422 36.3488 177.966 cv
36.7238 177.51 36.9719 176.887 37.0926 176.096 cv
37.4145 176.096 li
37.4145 178.69 li
39.5965 178.69 li
39.5965 179.152 li
cp
@
51.5535 180.469 mo
51.775 179.86 52.1066 179.357 52.5492 178.961 cv
52.9918 178.559 53.4406 178.358 53.8969 178.358 cv
54.2316 178.358 54.523 178.486 54.7715 178.74 cv
55.0258 178.988 55.1531 179.28 55.1535 179.615 cv
55.1535 179.823 55.0965 179.997 54.9828 180.138 cv
54.8688 180.272 54.7242 180.339 54.5504 180.339 cv
54.2551 180.339 54.0305 180.088 53.8766 179.585 cv
53.7691 179.25 53.6117 179.082 53.4039 179.082 cv
53.223 179.082 53.0082 179.189 52.7602 179.404 cv
52.5121 179.612 52.2977 179.87 52.1168 180.178 cv
51.9156 180.527 51.7852 180.855 51.7246 181.164 cv
51.6645 181.465 51.6344 181.961 51.6344 182.652 cv
51.6344 184.14 li
51.6344 184.958 51.6371 185.464 51.6441 185.658 cv
51.6574 185.846 51.6941 186 51.7547 186.121 cv
51.8957 186.396 52.2039 186.53 52.6801 186.523 cv
52.9211 186.523 li
52.9211 186.986 li
48.9594 186.986 li
48.9594 186.523 li
49.1305 186.523 li
49.6059 186.53 49.9145 186.396 50.0555 186.121 cv
50.1156 186 50.1492 185.846 50.1559 185.658 cv
50.1691 185.464 50.1758 184.958 50.1762 184.14 cv
50.1762 181.797 li
50.1762 180.973 50.1691 180.467 50.1559 180.279 cv
50.1492 180.091 50.1156 179.937 50.0555 179.816 cv
49.9211 179.541 49.616 179.407 49.1406 179.414 cv
48.9594 179.414 li
48.9594 178.951 li
49.5492 178.884 50.3066 178.687 51.232 178.358 cv
51.4262 178.854 51.5332 179.558 51.5535 180.469 cv
f
51.5535 180.469 mo
51.775 179.86 52.1066 179.357 52.5492 178.961 cv
52.9918 178.559 53.4406 178.358 53.8969 178.358 cv
54.2316 178.358 54.523 178.486 54.7715 178.74 cv
55.0258 178.988 55.1531 179.28 55.1535 179.615 cv
55.1535 179.823 55.0965 179.997 54.9828 180.138 cv
54.8688 180.272 54.7242 180.339 54.5504 180.339 cv
54.2551 180.339 54.0305 180.088 53.8766 179.585 cv
53.7691 179.25 53.6117 179.082 53.4039 179.082 cv
53.223 179.082 53.0082 179.189 52.7602 179.404 cv
52.5121 179.612 52.2977 179.87 52.1168 180.178 cv
51.9156 180.527 51.7852 180.855 51.7246 181.164 cv
51.6645 181.465 51.6344 181.961 51.6344 182.652 cv
51.6344 184.14 li
51.6344 184.958 51.6371 185.464 51.6441 185.658 cv
51.6574 185.846 51.6941 186 51.7547 186.121 cv
51.8957 186.396 52.2039 186.53 52.6801 186.523 cv
52.9211 186.523 li
52.9211 186.986 li
48.9594 186.986 li
48.9594 186.523 li
49.1305 186.523 li
49.6059 186.53 49.9145 186.396 50.0555 186.121 cv
50.1156 186 50.1492 185.846 50.1559 185.658 cv
50.1691 185.464 50.1758 184.958 50.1762 184.14 cv
50.1762 181.797 li
50.1762 180.973 50.1691 180.467 50.1559 180.279 cv
50.1492 180.091 50.1156 179.937 50.0555 179.816 cv
49.9211 179.541 49.616 179.407 49.1406 179.414 cv
48.9594 179.414 li
48.9594 178.951 li
49.5492 178.884 50.3066 178.687 51.232 178.358 cv
51.4262 178.854 51.5332 179.558 51.5535 180.469 cv
cp
@
65.4996 178.69 mo
65.4996 179.152 li
64.0113 179.152 li
64.0113 184.14 li
64.0113 184.945 64.0145 185.447 64.0215 185.648 cv
64.0348 185.843 64.0715 186 64.132 186.121 cv
64.2727 186.396 64.5844 186.53 65.0672 186.523 cv
65.4395 186.523 li
65.4395 186.986 li
61.3969 186.986 li
61.3969 186.523 li
61.5176 186.523 li
61.9867 186.53 62.2914 186.396 62.4328 186.121 cv
62.493 186 62.5262 185.846 62.5332 185.658 cv
62.5465 185.464 62.5531 184.958 62.5535 184.14 cv
62.5535 179.152 li
61.2359 179.152 li
61.2359 178.69 li
62.5535 178.69 li
62.5535 177.946 li
62.5535 176.954 62.5938 176.247 62.6742 175.824 cv
62.7543 175.395 62.9285 174.966 63.1969 174.537 cv
63.8066 173.552 64.6715 173.059 65.7914 173.059 cv
66.6492 173.059 67.3191 173.3 67.8023 173.783 cv
68.0637 174.044 68.1945 174.309 68.1945 174.577 cv
68.1945 174.758 68.134 174.916 68.0137 175.05 cv
67.8992 175.177 67.7586 175.241 67.591 175.241 cv
67.2824 175.241 66.9945 174.963 66.7266 174.406 cv
66.4379 173.803 66.0629 173.502 65.6 173.502 cv
65.2715 173.502 64.9766 173.622 64.7152 173.863 cv
64.4539 174.098 64.2727 174.413 64.1723 174.809 cv
64.0918 175.117 64.0445 175.412 64.0316 175.693 cv
64.018 175.975 64.0113 176.763 64.0113 178.056 cv
64.0113 178.69 li
65.4996 178.69 li
f
65.4996 178.69 mo
65.4996 179.152 li
64.0113 179.152 li
64.0113 184.14 li
64.0113 184.945 64.0145 185.447 64.0215 185.648 cv
64.0348 185.843 64.0715 186 64.132 186.121 cv
64.2727 186.396 64.5844 186.53 65.0672 186.523 cv
65.4395 186.523 li
65.4395 186.986 li
61.3969 186.986 li
61.3969 186.523 li
61.5176 186.523 li
61.9867 186.53 62.2914 186.396 62.4328 186.121 cv
62.493 186 62.5262 185.846 62.5332 185.658 cv
62.5465 185.464 62.5531 184.958 62.5535 184.14 cv
62.5535 179.152 li
61.2359 179.152 li
61.2359 178.69 li
62.5535 178.69 li
62.5535 177.946 li
62.5535 176.954 62.5938 176.247 62.6742 175.824 cv
62.7543 175.395 62.9285 174.966 63.1969 174.537 cv
63.8066 173.552 64.6715 173.059 65.7914 173.059 cv
66.6492 173.059 67.3191 173.3 67.8023 173.783 cv
68.0637 174.044 68.1945 174.309 68.1945 174.577 cv
68.1945 174.758 68.134 174.916 68.0137 175.05 cv
67.8992 175.177 67.7586 175.241 67.591 175.241 cv
67.2824 175.241 66.9945 174.963 66.7266 174.406 cv
66.4379 173.803 66.0629 173.502 65.6 173.502 cv
65.2715 173.502 64.9766 173.622 64.7152 173.863 cv
64.4539 174.098 64.2727 174.413 64.1723 174.809 cv
64.0918 175.117 64.0445 175.412 64.0316 175.693 cv
64.018 175.975 64.0113 176.763 64.0113 178.056 cv
64.0113 178.69 li
65.4996 178.69 li
cp
@
78.6383 180.469 mo
78.8594 179.86 79.1914 179.357 79.6336 178.961 cv
80.0762 178.559 80.5254 178.358 80.9813 178.358 cv
81.316 178.358 81.6078 178.486 81.8559 178.74 cv
82.1105 178.988 82.2379 179.28 82.2383 179.615 cv
82.2383 179.823 82.1809 179.997 82.0672 180.138 cv
81.9531 180.272 81.809 180.339 81.6348 180.339 cv
81.3398 180.339 81.1152 180.088 80.9613 179.585 cv
80.8539 179.25 80.6961 179.082 80.4887 179.082 cv
80.3074 179.082 80.093 179.189 79.8449 179.404 cv
79.5965 179.612 79.3824 179.87 79.2016 180.178 cv
79.0004 180.527 78.8695 180.855 78.8094 181.164 cv
78.7488 181.465 78.7188 181.961 78.7188 182.652 cv
78.7188 184.14 li
78.7188 184.958 78.7219 185.464 78.7289 185.658 cv
78.7422 185.846 78.7789 186 78.8395 186.121 cv
78.9801 186.396 79.2887 186.53 79.7645 186.523 cv
80.0059 186.523 li
80.0059 186.986 li
76.0441 186.986 li
76.0441 186.523 li
76.2148 186.523 li
76.6906 186.53 76.9988 186.396 77.1402 186.121 cv
77.2004 186 77.2336 185.846 77.2406 185.658 cv
77.2539 185.464 77.2602 184.958 77.2605 184.14 cv
77.2605 181.797 li
77.2605 180.973 77.2539 180.467 77.2406 180.279 cv
77.2336 180.091 77.2004 179.937 77.1402 179.816 cv
77.0059 179.541 76.7008 179.407 76.225 179.414 cv
76.0441 179.414 li
76.0441 178.951 li
76.6336 178.884 77.391 178.687 78.3168 178.358 cv
78.5105 178.854 78.618 179.558 78.6383 180.469 cv
f
78.6383 180.469 mo
78.8594 179.86 79.1914 179.357 79.6336 178.961 cv
80.0762 178.559 80.5254 178.358 80.9813 178.358 cv
81.316 178.358 81.6078 178.486 81.8559 178.74 cv
82.1105 178.988 82.2379 179.28 82.2383 179.615 cv
82.2383 179.823 82.1809 179.997 82.0672 180.138 cv
81.9531 180.272 81.809 180.339 81.6348 180.339 cv
81.3398 180.339 81.1152 180.088 80.9613 179.585 cv
80.8539 179.25 80.6961 179.082 80.4887 179.082 cv
80.3074 179.082 80.093 179.189 79.8449 179.404 cv
79.5965 179.612 79.3824 179.87 79.2016 180.178 cv
79.0004 180.527 78.8695 180.855 78.8094 181.164 cv
78.7488 181.465 78.7188 181.961 78.7188 182.652 cv
78.7188 184.14 li
78.7188 184.958 78.7219 185.464 78.7289 185.658 cv
78.7422 185.846 78.7789 186 78.8395 186.121 cv
78.9801 186.396 79.2887 186.53 79.7645 186.523 cv
80.0059 186.523 li
80.0059 186.986 li
76.0441 186.986 li
76.0441 186.523 li
76.2148 186.523 li
76.6906 186.53 76.9988 186.396 77.1402 186.121 cv
77.2004 186 77.2336 185.846 77.2406 185.658 cv
77.2539 185.464 77.2602 184.958 77.2605 184.14 cv
77.2605 181.797 li
77.2605 180.973 77.2539 180.467 77.2406 180.279 cv
77.2336 180.091 77.2004 179.937 77.1402 179.816 cv
77.0059 179.541 76.7008 179.407 76.225 179.414 cv
76.0441 179.414 li
76.0441 178.951 li
76.6336 178.884 77.391 178.687 78.3168 178.358 cv
78.5105 178.854 78.618 179.558 78.6383 180.469 cv
cp
@
89.0848 186.835 mo
89.0848 182.43 li
89.5375 182.43 li
89.7387 183.584 90.0367 184.475 90.4324 185.105 cv
91.1094 186.191 92.0105 186.734 93.1371 186.734 cv
93.982 186.734 94.6555 186.439 95.1586 185.85 cv
95.5871 185.346 95.8016 184.75 95.802 184.059 cv
95.802 183.255 95.4934 182.575 94.877 182.018 cv
94.5215 181.696 93.7336 181.241 92.5137 180.651 cv
91.3137 180.068 90.4926 179.504 90.05 178.961 cv
89.4672 178.244 89.1754 177.396 89.1754 176.418 cv
89.1754 175.439 89.4801 174.625 90.0902 173.974 cv
90.7004 173.324 91.4879 172.999 92.4535 172.999 cv
93.0367 172.999 93.5496 173.113 93.9922 173.341 cv
94.4344 173.568 94.8734 173.944 95.309 174.467 cv
95.5906 174.105 95.748 173.703 95.7816 173.26 cv
96.184 173.26 li
96.184 176.85 li
95.7816 176.85 li
95.5938 175.992 95.2922 175.285 94.877 174.728 cv
94.2535 173.897 93.4855 173.482 92.5742 173.481 cv
91.984 173.481 91.5012 173.662 91.1262 174.024 cv
90.7172 174.427 90.5129 174.949 90.5129 175.593 cv
90.5129 176.216 90.7172 176.75 91.1262 177.192 cv
91.5352 177.628 92.2957 178.127 93.4086 178.69 cv
94.3539 179.173 95.0004 179.521 95.3492 179.736 cv
95.6977 179.95 95.9926 180.188 96.2344 180.45 cv
96.918 181.167 97.2598 182.105 97.2598 183.265 cv
97.2598 184.499 96.8879 185.477 96.1438 186.201 cv
95.4398 186.892 94.5215 187.237 93.3887 187.237 cv
92.0141 187.237 90.8813 186.657 89.9898 185.498 cv
89.7953 185.813 89.6445 186.259 89.5375 186.835 cv
89.0848 186.835 li
f
89.0848 186.835 mo
89.0848 182.43 li
89.5375 182.43 li
89.7387 183.584 90.0367 184.475 90.4324 185.105 cv
91.1094 186.191 92.0105 186.734 93.1371 186.734 cv
93.982 186.734 94.6555 186.439 95.1586 185.85 cv
95.5871 185.346 95.8016 184.75 95.802 184.059 cv
95.802 183.255 95.4934 182.575 94.877 182.018 cv
94.5215 181.696 93.7336 181.241 92.5137 180.651 cv
91.3137 180.068 90.4926 179.504 90.05 178.961 cv
89.4672 178.244 89.1754 177.396 89.1754 176.418 cv
89.1754 175.439 89.4801 174.625 90.0902 173.974 cv
90.7004 173.324 91.4879 172.999 92.4535 172.999 cv
93.0367 172.999 93.5496 173.113 93.9922 173.341 cv
94.4344 173.568 94.8734 173.944 95.309 174.467 cv
95.5906 174.105 95.748 173.703 95.7816 173.26 cv
96.184 173.26 li
96.184 176.85 li
95.7816 176.85 li
95.5938 175.992 95.2922 175.285 94.877 174.728 cv
94.2535 173.897 93.4855 173.482 92.5742 173.481 cv
91.984 173.481 91.5012 173.662 91.1262 174.024 cv
90.7172 174.427 90.5129 174.949 90.5129 175.593 cv
90.5129 176.216 90.7172 176.75 91.1262 177.192 cv
91.5352 177.628 92.2957 178.127 93.4086 178.69 cv
94.3539 179.173 95.0004 179.521 95.3492 179.736 cv
95.6977 179.95 95.9926 180.188 96.2344 180.45 cv
96.918 181.167 97.2598 182.105 97.2598 183.265 cv
97.2598 184.499 96.8879 185.477 96.1438 186.201 cv
95.4398 186.892 94.5215 187.237 93.3887 187.237 cv
92.0141 187.237 90.8813 186.657 89.9898 185.498 cv
89.7953 185.813 89.6445 186.259 89.5375 186.835 cv
89.0848 186.835 li
cp
@
100.621 173.079 mo
100.916 173.079 101.164 173.183 101.365 173.391 cv
101.573 173.599 101.677 173.85 101.677 174.145 cv
101.677 174.434 101.573 174.681 101.365 174.889 cv
101.157 175.097 100.909 175.201 100.621 175.201 cv
100.326 175.201 100.075 175.097 99.8672 174.889 cv
99.659 174.681 99.5551 174.427 99.5551 174.125 cv
99.5551 173.837 99.659 173.592 99.8672 173.391 cv
100.075 173.189 100.326 173.086 100.621 173.079 cv
cp
101.486 178.358 mo
101.486 184.14 li
101.486 184.958 101.489 185.464 101.496 185.658 cv
101.509 185.846 101.546 186 101.607 186.121 cv
101.747 186.396 102.055 186.53 102.532 186.523 cv
102.713 186.523 li
102.713 186.986 li
98.7004 186.986 li
98.7004 186.523 li
98.9922 186.523 li
99.468 186.53 99.7762 186.396 99.9172 186.121 cv
99.9777 186 100.011 185.866 100.018 185.719 cv
100.024 185.564 100.031 185.039 100.038 184.14 cv
100.038 181.626 li
100.038 180.58 99.9809 179.944 99.8672 179.716 cv
99.7527 179.481 99.441 179.364 98.932 179.364 cv
98.7004 179.364 li
98.7004 178.901 li
99.1359 178.854 99.6051 178.777 100.108 178.67 cv
100.618 178.563 101 178.459 101.255 178.358 cv
101.486 178.358 li
ef
100.621 173.079 mo
100.916 173.079 101.164 173.183 101.365 173.391 cv
101.573 173.599 101.677 173.85 101.677 174.145 cv
101.677 174.434 101.573 174.681 101.365 174.889 cv
101.157 175.097 100.909 175.201 100.621 175.201 cv
100.326 175.201 100.075 175.097 99.8672 174.889 cv
99.659 174.681 99.5551 174.427 99.5551 174.125 cv
99.5551 173.837 99.659 173.592 99.8672 173.391 cv
100.075 173.189 100.326 173.086 100.621 173.079 cv
cp
@
101.486 178.358 mo
101.486 184.14 li
101.486 184.958 101.489 185.464 101.496 185.658 cv
101.509 185.846 101.546 186 101.607 186.121 cv
101.747 186.396 102.055 186.53 102.532 186.523 cv
102.713 186.523 li
102.713 186.986 li
98.7004 186.986 li
98.7004 186.523 li
98.9922 186.523 li
99.468 186.53 99.7762 186.396 99.9172 186.121 cv
99.9777 186 100.011 185.866 100.018 185.719 cv
100.024 185.564 100.031 185.039 100.038 184.14 cv
100.038 181.626 li
100.038 180.58 99.9809 179.944 99.8672 179.716 cv
99.7527 179.481 99.441 179.364 98.932 179.364 cv
98.7004 179.364 li
98.7004 178.901 li
99.1359 178.854 99.6051 178.777 100.108 178.67 cv
100.618 178.563 101 178.459 101.255 178.358 cv
101.486 178.358 li
cp
@
115.006 178.358 mo
115.277 178.358 li
115.344 178.546 115.405 178.804 115.458 179.132 cv
115.512 179.454 115.542 179.766 115.549 180.068 cv
116.414 178.928 117.379 178.358 118.445 178.358 cv
119.41 178.358 120.084 178.714 120.466 179.424 cv
120.6 179.672 120.684 179.927 120.717 180.188 cv
120.757 180.443 120.778 180.895 120.778 181.546 cv
120.778 184.14 li
120.778 184.958 120.781 185.464 120.788 185.658 cv
120.801 185.846 120.838 186 120.898 186.121 cv
121.039 186.396 121.344 186.53 121.813 186.523 cv
121.924 186.523 li
121.924 186.986 li
118.113 186.986 li
118.113 186.523 li
118.274 186.523 li
118.756 186.53 119.068 186.396 119.209 186.121 cv
119.269 186 119.303 185.866 119.309 185.719 cv
119.316 185.564 119.323 185.039 119.33 184.14 cv
119.33 181.465 li
119.33 180.869 119.316 180.477 119.289 180.289 cv
119.269 180.094 119.209 179.903 119.108 179.716 cv
118.854 179.233 118.441 178.992 117.871 178.992 cv
117.013 178.992 116.239 179.582 115.549 180.761 cv
115.549 184.14 li
115.549 184.964 115.552 185.471 115.559 185.658 cv
115.572 185.846 115.609 186 115.67 186.121 cv
115.81 186.396 116.122 186.53 116.605 186.523 cv
116.705 186.523 li
116.705 186.986 li
112.934 186.986 li
112.934 186.523 li
113.065 186.523 li
113.534 186.53 113.839 186.396 113.98 186.121 cv
114.041 186 114.074 185.846 114.08 185.658 cv
114.094 185.464 114.1 184.958 114.101 184.14 cv
114.101 181.677 li
114.101 180.859 114.094 180.352 114.08 180.158 cv
114.074 179.964 114.041 179.806 113.98 179.685 cv
113.846 179.418 113.538 179.287 113.055 179.293 cv
112.934 179.293 li
112.934 178.831 li
113.598 178.744 114.288 178.586 115.006 178.358 cv
f
115.006 178.358 mo
115.277 178.358 li
115.344 178.546 115.405 178.804 115.458 179.132 cv
115.512 179.454 115.542 179.766 115.549 180.068 cv
116.414 178.928 117.379 178.358 118.445 178.358 cv
119.41 178.358 120.084 178.714 120.466 179.424 cv
120.6 179.672 120.684 179.927 120.717 180.188 cv
120.757 180.443 120.778 180.895 120.778 181.546 cv
120.778 184.14 li
120.778 184.958 120.781 185.464 120.788 185.658 cv
120.801 185.846 120.838 186 120.898 186.121 cv
121.039 186.396 121.344 186.53 121.813 186.523 cv
121.924 186.523 li
121.924 186.986 li
118.113 186.986 li
118.113 186.523 li
118.274 186.523 li
118.756 186.53 119.068 186.396 119.209 186.121 cv
119.269 186 119.303 185.866 119.309 185.719 cv
119.316 185.564 119.323 185.039 119.33 184.14 cv
119.33 181.465 li
119.33 180.869 119.316 180.477 119.289 180.289 cv
119.269 180.094 119.209 179.903 119.108 179.716 cv
118.854 179.233 118.441 178.992 117.871 178.992 cv
117.013 178.992 116.239 179.582 115.549 180.761 cv
115.549 184.14 li
115.549 184.964 115.552 185.471 115.559 185.658 cv
115.572 185.846 115.609 186 115.67 186.121 cv
115.81 186.396 116.122 186.53 116.605 186.523 cv
116.705 186.523 li
116.705 186.986 li
112.934 186.986 li
112.934 186.523 li
113.065 186.523 li
113.534 186.53 113.839 186.396 113.98 186.121 cv
114.041 186 114.074 185.846 114.08 185.658 cv
114.094 185.464 114.1 184.958 114.101 184.14 cv
114.101 181.677 li
114.101 180.859 114.094 180.352 114.08 180.158 cv
114.074 179.964 114.041 179.806 113.98 179.685 cv
113.846 179.418 113.538 179.287 113.055 179.293 cv
112.934 179.293 li
112.934 178.831 li
113.598 178.744 114.288 178.586 115.006 178.358 cv
cp
@
134.73 173.059 mo
134.73 184.14 li
134.73 184.964 134.733 185.471 134.74 185.658 cv
134.753 185.846 134.79 186 134.85 186.121 cv
134.991 186.396 135.3 186.53 135.776 186.523 cv
135.987 186.523 li
135.987 186.986 li
131.985 186.986 li
131.985 186.523 li
132.236 186.523 li
132.712 186.53 133.017 186.396 133.151 186.121 cv
133.211 186 133.245 185.863 133.252 185.709 cv
133.258 185.555 133.265 185.032 133.272 184.14 cv
133.272 175.935 li
133.272 175.09 133.208 174.551 133.081 174.316 cv
132.96 174.075 132.679 173.954 132.236 173.954 cv
132.116 173.954 li
132.116 173.491 li
132.477 173.491 132.91 173.448 133.413 173.36 cv
133.915 173.267 134.284 173.166 134.519 173.059 cv
134.73 173.059 li
f
134.73 173.059 mo
134.73 184.14 li
134.73 184.964 134.733 185.471 134.74 185.658 cv
134.753 185.846 134.79 186 134.85 186.121 cv
134.991 186.396 135.3 186.53 135.776 186.523 cv
135.987 186.523 li
135.987 186.986 li
131.985 186.986 li
131.985 186.523 li
132.236 186.523 li
132.712 186.53 133.017 186.396 133.151 186.121 cv
133.211 186 133.245 185.863 133.252 185.709 cv
133.258 185.555 133.265 185.032 133.272 184.14 cv
133.272 175.935 li
133.272 175.09 133.208 174.551 133.081 174.316 cv
132.96 174.075 132.679 173.954 132.236 173.954 cv
132.116 173.954 li
132.116 173.491 li
132.477 173.491 132.91 173.448 133.413 173.36 cv
133.915 173.267 134.284 173.166 134.519 173.059 cv
134.73 173.059 li
cp
@
162.853 176.679 mo
162.853 183.416 li
162.853 184.328 162.863 184.938 162.883 185.246 cv
162.91 185.548 162.967 185.796 163.054 185.99 cv
163.235 186.352 163.668 186.53 164.351 186.523 cv
164.693 186.523 li
164.693 186.986 li
159.032 186.986 li
159.032 186.523 li
159.384 186.523 li
160.061 186.53 160.49 186.352 160.671 185.99 cv
160.758 185.796 160.811 185.548 160.832 185.246 cv
160.859 184.945 160.872 184.335 160.872 183.416 cv
160.872 176.679 li
160.872 175.774 160.859 175.177 160.832 174.889 cv
160.812 174.601 160.755 174.363 160.661 174.175 cv
160.567 173.987 160.433 173.867 160.259 173.813 cv
160.091 173.753 159.769 173.723 159.293 173.723 cv
159.032 173.723 li
159.032 173.26 li
164.693 173.26 li
164.693 173.723 li
164.432 173.723 li
163.955 173.723 163.63 173.753 163.456 173.813 cv
163.289 173.867 163.158 173.987 163.064 174.175 cv
162.97 174.363 162.91 174.601 162.883 174.889 cv
162.863 175.177 162.853 175.774 162.853 176.679 cv
f
162.853 176.679 mo
162.853 183.416 li
162.853 184.328 162.863 184.938 162.883 185.246 cv
162.91 185.548 162.967 185.796 163.054 185.99 cv
163.235 186.352 163.668 186.53 164.351 186.523 cv
164.693 186.523 li
164.693 186.986 li
159.032 186.986 li
159.032 186.523 li
159.384 186.523 li
160.061 186.53 160.49 186.352 160.671 185.99 cv
160.758 185.796 160.811 185.548 160.832 185.246 cv
160.859 184.945 160.872 184.335 160.872 183.416 cv
160.872 176.679 li
160.872 175.774 160.859 175.177 160.832 174.889 cv
160.812 174.601 160.755 174.363 160.661 174.175 cv
160.567 173.987 160.433 173.867 160.259 173.813 cv
160.091 173.753 159.769 173.723 159.293 173.723 cv
159.032 173.723 li
159.032 173.26 li
164.693 173.26 li
164.693 173.723 li
164.432 173.723 li
163.955 173.723 163.63 173.753 163.456 173.813 cv
163.289 173.867 163.158 173.987 163.064 174.175 cv
162.97 174.363 162.91 174.601 162.883 174.889 cv
162.863 175.177 162.853 175.774 162.853 176.679 cv
cp
@
168.236 178.358 mo
168.336 178.358 li
168.537 178.848 168.634 179.431 168.627 180.108 cv
169.459 178.941 170.404 178.358 171.463 178.358 cv
172.683 178.358 173.447 178.979 173.756 180.218 cv
174.292 179.528 174.775 179.045 175.204 178.77 cv
175.639 178.496 176.125 178.358 176.662 178.358 cv
177.064 178.358 177.443 178.445 177.798 178.619 cv
178.16 178.787 178.435 179.012 178.623 179.293 cv
178.784 179.535 178.884 179.793 178.924 180.068 cv
178.971 180.343 178.995 180.869 178.995 181.646 cv
178.995 184.14 li
178.995 184.958 178.998 185.464 179.005 185.658 cv
179.018 185.846 179.055 186 179.115 186.121 cv
179.256 186.396 179.561 186.53 180.03 186.523 cv
180.151 186.523 li
180.151 186.986 li
176.441 186.986 li
176.441 186.523 li
176.501 186.523 li
176.977 186.53 177.285 186.396 177.426 186.121 cv
177.486 186 177.52 185.866 177.527 185.719 cv
177.533 185.564 177.54 185.039 177.547 184.14 cv
177.547 181.385 li
177.547 180.507 177.456 179.93 177.275 179.655 cv
177.02 179.266 176.635 179.072 176.119 179.072 cv
175.361 179.072 174.593 179.669 173.816 180.862 cv
173.816 184.14 li
173.816 184.964 173.819 185.471 173.826 185.658 cv
173.839 185.839 173.876 185.994 173.937 186.121 cv
174.064 186.389 174.346 186.523 174.782 186.523 cv
174.832 186.523 li
174.832 186.986 li
171.222 186.986 li
171.222 186.523 li
171.322 186.523 li
171.798 186.53 172.103 186.396 172.238 186.121 cv
172.298 186 172.331 185.843 172.338 185.648 cv
172.351 185.454 172.358 184.951 172.358 184.14 cv
172.358 181.837 li
172.358 180.832 172.294 180.182 172.167 179.887 cv
171.926 179.337 171.5 179.063 170.89 179.062 cv
170.354 179.062 169.841 179.307 169.352 179.796 cv
169.264 179.89 169.023 180.188 168.627 180.691 cv
168.627 184.14 li
168.627 184.964 168.631 185.471 168.638 185.658 cv
168.651 185.846 168.688 186 168.748 186.121 cv
168.875 186.389 169.167 186.523 169.623 186.523 cv
169.713 186.523 li
169.713 186.986 li
166.063 186.986 li
166.063 186.523 li
166.154 186.523 li
166.63 186.53 166.935 186.396 167.069 186.121 cv
167.129 186 167.163 185.843 167.17 185.648 cv
167.183 185.454 167.189 184.951 167.189 184.14 cv
167.189 181.666 li
167.189 180.855 167.183 180.352 167.17 180.158 cv
167.163 179.957 167.129 179.796 167.069 179.675 cv
166.935 179.407 166.63 179.277 166.154 179.283 cv
166.063 179.283 li
166.063 178.821 li
166.439 178.78 166.831 178.717 167.24 178.63 cv
167.655 178.543 167.987 178.452 168.236 178.358 cv
f
168.236 178.358 mo
168.336 178.358 li
168.537 178.848 168.634 179.431 168.627 180.108 cv
169.459 178.941 170.404 178.358 171.463 178.358 cv
172.683 178.358 173.447 178.979 173.756 180.218 cv
174.292 179.528 174.775 179.045 175.204 178.77 cv
175.639 178.496 176.125 178.358 176.662 178.358 cv
177.064 178.358 177.443 178.445 177.798 178.619 cv
178.16 178.787 178.435 179.012 178.623 179.293 cv
178.784 179.535 178.884 179.793 178.924 180.068 cv
178.971 180.343 178.995 180.869 178.995 181.646 cv
178.995 184.14 li
178.995 184.958 178.998 185.464 179.005 185.658 cv
179.018 185.846 179.055 186 179.115 186.121 cv
179.256 186.396 179.561 186.53 180.03 186.523 cv
180.151 186.523 li
180.151 186.986 li
176.441 186.986 li
176.441 186.523 li
176.501 186.523 li
176.977 186.53 177.285 186.396 177.426 186.121 cv
177.486 186 177.52 185.866 177.527 185.719 cv
177.533 185.564 177.54 185.039 177.547 184.14 cv
177.547 181.385 li
177.547 180.507 177.456 179.93 177.275 179.655 cv
177.02 179.266 176.635 179.072 176.119 179.072 cv
175.361 179.072 174.593 179.669 173.816 180.862 cv
173.816 184.14 li
173.816 184.964 173.819 185.471 173.826 185.658 cv
173.839 185.839 173.876 185.994 173.937 186.121 cv
174.064 186.389 174.346 186.523 174.782 186.523 cv
174.832 186.523 li
174.832 186.986 li
171.222 186.986 li
171.222 186.523 li
171.322 186.523 li
171.798 186.53 172.103 186.396 172.238 186.121 cv
172.298 186 172.331 185.843 172.338 185.648 cv
172.351 185.454 172.358 184.951 172.358 184.14 cv
172.358 181.837 li
172.358 180.832 172.294 180.182 172.167 179.887 cv
171.926 179.337 171.5 179.063 170.89 179.062 cv
170.354 179.062 169.841 179.307 169.352 179.796 cv
169.264 179.89 169.023 180.188 168.627 180.691 cv
168.627 184.14 li
168.627 184.964 168.631 185.471 168.638 185.658 cv
168.651 185.846 168.688 186 168.748 186.121 cv
168.875 186.389 169.167 186.523 169.623 186.523 cv
169.713 186.523 li
169.713 186.986 li
166.063 186.986 li
166.063 186.523 li
166.154 186.523 li
166.63 186.53 166.935 186.396 167.069 186.121 cv
167.129 186 167.163 185.843 167.17 185.648 cv
167.183 185.454 167.189 184.951 167.189 184.14 cv
167.189 181.666 li
167.189 180.855 167.183 180.352 167.17 180.158 cv
167.163 179.957 167.129 179.796 167.069 179.675 cv
166.935 179.407 166.63 179.277 166.154 179.283 cv
166.063 179.283 li
166.063 178.821 li
166.439 178.78 166.831 178.717 167.24 178.63 cv
167.655 178.543 167.987 178.452 168.236 178.358 cv
cp
@
217.039 180.53 mo
217.039 183.416 li
217.039 184.335 217.05 184.945 217.07 185.246 cv
217.096 185.548 217.154 185.796 217.241 185.99 cv
217.421 186.352 217.85 186.53 218.528 186.523 cv
218.92 186.523 li
218.92 186.986 li
213.259 186.986 li
213.259 186.523 li
213.57 186.523 li
214.247 186.53 214.676 186.352 214.857 185.99 cv
214.945 185.796 214.998 185.548 215.018 185.246 cv
215.045 184.938 215.058 184.328 215.059 183.416 cv
215.059 176.679 li
215.059 175.774 215.045 175.177 215.018 174.889 cv
214.998 174.601 214.941 174.363 214.848 174.175 cv
214.754 173.987 214.623 173.867 214.455 173.813 cv
214.288 173.753 213.963 173.723 213.48 173.723 cv
213.259 173.723 li
213.259 173.26 li
214.727 173.2 li
215.82 173.153 216.791 173.13 217.643 173.129 cv
218.641 173.129 219.432 173.186 220.016 173.3 cv
220.599 173.414 221.098 173.609 221.514 173.884 cv
222.513 174.554 223.012 175.536 223.012 176.83 cv
223.012 178.244 222.52 179.277 221.534 179.927 cv
220.924 180.329 219.855 180.53 218.327 180.53 cv
217.039 180.53 li
cp
217.039 180.027 mo
217.884 180.027 li
218.44 180.027 218.859 179.991 219.141 179.917 cv
219.429 179.836 219.694 179.689 219.936 179.474 cv
220.559 178.938 220.871 178.084 220.871 176.91 cv
220.871 175.677 220.582 174.785 220.006 174.235 cv
219.764 174.008 219.483 173.85 219.161 173.763 cv
218.839 173.669 218.404 173.622 217.854 173.622 cv
217.532 173.622 217.261 173.635 217.039 173.662 cv
217.039 180.027 li
ef
226.796 180.469 mo
227.017 179.86 227.349 179.357 227.791 178.961 cv
228.234 178.559 228.683 178.358 229.139 178.358 cv
229.474 178.358 229.766 178.486 230.014 178.74 cv
230.268 178.988 230.396 179.28 230.396 179.615 cv
230.396 179.823 230.338 179.997 230.225 180.138 cv
230.111 180.272 229.967 180.339 229.793 180.339 cv
229.497 180.339 229.273 180.088 229.119 179.585 cv
229.011 179.25 228.854 179.082 228.646 179.082 cv
228.465 179.082 228.25 179.189 228.002 179.404 cv
227.754 179.612 227.54 179.87 227.359 180.178 cv
227.158 180.527 227.027 180.855 226.967 181.164 cv
226.907 181.465 226.876 181.961 226.876 182.652 cv
226.876 184.14 li
226.876 184.958 226.879 185.464 226.887 185.658 cv
226.9 185.846 226.936 186 226.997 186.121 cv
227.138 186.396 227.446 186.53 227.922 186.523 cv
228.163 186.523 li
228.163 186.986 li
224.202 186.986 li
224.202 186.523 li
224.373 186.523 li
224.848 186.53 225.157 186.396 225.298 186.121 cv
225.358 186 225.391 185.846 225.398 185.658 cv
225.411 185.464 225.418 184.958 225.418 184.14 cv
225.418 181.797 li
225.418 180.973 225.411 180.467 225.398 180.279 cv
225.391 180.091 225.358 179.937 225.298 179.816 cv
225.163 179.541 224.859 179.407 224.383 179.414 cv
224.202 179.414 li
224.202 178.951 li
224.791 178.884 225.549 178.687 226.474 178.358 cv
226.668 178.854 226.775 179.558 226.796 180.469 cv
f
247.424 184.955 mo
247.826 184.955 li
247.658 185.578 247.4 186.071 247.052 186.432 cv
246.482 187.022 245.714 187.317 244.749 187.318 cv
243.73 187.318 242.871 186.959 242.175 186.242 cv
241.363 185.417 240.958 184.311 240.958 182.923 cv
240.958 181.683 241.296 180.644 241.974 179.806 cv
242.336 179.357 242.778 179.005 243.301 178.75 cv
243.824 178.489 244.357 178.358 244.9 178.358 cv
245.59 178.358 246.194 178.523 246.71 178.851 cv
247.233 179.173 247.494 179.548 247.494 179.977 cv
247.494 180.178 247.44 180.346 247.333 180.48 cv
247.226 180.607 247.095 180.671 246.941 180.671 cv
246.72 180.671 246.555 180.607 246.448 180.48 cv
246.341 180.346 246.257 180.105 246.197 179.756 cv
246.137 179.421 246.016 179.186 245.835 179.052 cv
245.661 178.911 245.386 178.841 245.011 178.841 cv
243.435 178.841 242.648 180.081 242.648 182.561 cv
242.648 183.922 242.875 184.992 243.331 185.769 cv
243.519 186.084 243.78 186.332 244.116 186.513 cv
244.45 186.694 244.816 186.785 245.211 186.785 cv
246.364 186.785 247.102 186.175 247.424 184.955 cv
f
257.726 187.247 mo
257.726 184.532 li
258.088 184.532 li
258.275 185.263 258.51 185.799 258.792 186.141 cv
259.2 186.637 259.683 186.885 260.24 186.885 cv
260.642 186.885 260.967 186.748 261.215 186.473 cv
261.463 186.198 261.587 185.843 261.587 185.407 cv
261.587 184.958 261.426 184.556 261.105 184.2 cv
260.93 184.006 260.498 183.718 259.807 183.336 cv
258.983 182.873 258.436 182.441 258.168 182.039 cv
257.887 181.616 257.746 181.157 257.746 180.661 cv
257.746 180.024 257.94 179.481 258.329 179.032 cv
258.725 178.583 259.2 178.358 259.757 178.358 cv
260.387 178.358 260.927 178.65 261.376 179.233 cv
261.456 179.152 261.577 178.908 261.738 178.499 cv
262.07 178.499 li
262.07 181.063 li
261.738 181.063 li
261.611 180.399 261.369 179.86 261.014 179.444 cv
260.665 179.022 260.273 178.81 259.838 178.81 cv
259.502 178.81 259.221 178.931 258.993 179.173 cv
258.765 179.414 258.651 179.712 258.651 180.068 cv
258.651 180.436 258.771 180.752 259.013 181.012 cv
259.254 181.268 259.71 181.569 260.38 181.918 cv
261.138 182.313 261.671 182.692 261.979 183.054 cv
262.382 183.537 262.582 184.143 262.582 184.874 cv
262.582 185.598 262.364 186.188 261.929 186.644 cv
261.507 187.093 260.967 187.317 260.31 187.318 cv
259.941 187.318 259.626 187.25 259.365 187.116 cv
259.11 186.982 258.815 186.738 258.48 186.382 cv
258.413 186.463 258.339 186.591 258.259 186.764 cv
258.185 186.939 258.128 187.1 258.088 187.247 cv
257.726 187.247 li
f
264.245 187.247 mo
264.245 184.532 li
264.607 184.532 li
264.794 185.263 265.029 185.799 265.311 186.141 cv
265.719 186.637 266.202 186.885 266.758 186.885 cv
267.161 186.885 267.486 186.748 267.734 186.473 cv
267.982 186.198 268.105 185.843 268.106 185.407 cv
268.106 184.958 267.945 184.556 267.623 184.2 cv
267.449 184.006 267.016 183.718 266.326 183.336 cv
265.502 182.873 264.955 182.441 264.687 182.039 cv
264.405 181.616 264.264 181.157 264.264 180.661 cv
264.264 180.024 264.459 179.481 264.848 179.032 cv
265.243 178.583 265.719 178.358 266.276 178.358 cv
266.906 178.358 267.445 178.65 267.895 179.233 cv
267.975 179.152 268.096 178.908 268.257 178.499 cv
268.588 178.499 li
268.588 181.063 li
268.257 181.063 li
268.129 180.399 267.888 179.86 267.532 179.444 cv
267.184 179.022 266.791 178.81 266.356 178.81 cv
266.021 178.81 265.739 178.931 265.512 179.173 cv
265.283 179.414 265.17 179.712 265.17 180.068 cv
265.17 180.436 265.29 180.752 265.532 181.012 cv
265.773 181.268 266.229 181.569 266.899 181.918 cv
267.657 182.313 268.189 182.692 268.498 183.054 cv
268.9 183.537 269.102 184.143 269.102 184.874 cv
269.102 185.598 268.883 186.188 268.448 186.644 cv
268.025 187.093 267.486 187.317 266.829 187.318 cv
266.46 187.318 266.145 187.25 265.884 187.116 cv
265.629 186.982 265.334 186.738 264.998 186.382 cv
264.932 186.463 264.858 186.591 264.777 186.764 cv
264.704 186.939 264.646 187.1 264.607 187.247 cv
264.245 187.247 li
f
272.211 173.079 mo
272.506 173.079 272.754 173.183 272.955 173.391 cv
273.163 173.599 273.267 173.85 273.267 174.145 cv
273.267 174.434 273.163 174.681 272.955 174.889 cv
272.747 175.097 272.499 175.201 272.211 175.201 cv
271.916 175.201 271.664 175.097 271.457 174.889 cv
271.249 174.681 271.145 174.427 271.145 174.125 cv
271.145 173.837 271.249 173.592 271.457 173.391 cv
271.664 173.189 271.916 173.086 272.211 173.079 cv
cp
273.076 178.358 mo
273.076 184.14 li
273.076 184.958 273.079 185.464 273.086 185.658 cv
273.099 185.846 273.136 186 273.196 186.121 cv
273.337 186.396 273.646 186.53 274.121 186.523 cv
274.303 186.523 li
274.303 186.986 li
270.29 186.986 li
270.29 186.523 li
270.582 186.523 li
271.058 186.53 271.366 186.396 271.507 186.121 cv
271.568 186 271.601 185.866 271.608 185.719 cv
271.614 185.564 271.621 185.039 271.628 184.14 cv
271.628 181.626 li
271.628 180.58 271.571 179.944 271.457 179.716 cv
271.343 179.481 271.031 179.364 270.522 179.364 cv
270.29 179.364 li
270.29 178.901 li
270.726 178.854 271.195 178.777 271.698 178.67 cv
272.207 178.563 272.59 178.459 272.845 178.358 cv
273.076 178.358 li
ef
277.553 178.358 mo
277.825 178.358 li
277.892 178.546 277.952 178.804 278.006 179.132 cv
278.059 179.454 278.089 179.766 278.096 180.068 cv
278.961 178.928 279.926 178.358 280.992 178.358 cv
281.957 178.358 282.631 178.714 283.013 179.424 cv
283.147 179.672 283.231 179.927 283.265 180.188 cv
283.305 180.443 283.325 180.895 283.325 181.546 cv
283.325 184.14 li
283.325 184.958 283.328 185.464 283.335 185.658 cv
283.348 185.846 283.385 186 283.446 186.121 cv
283.586 186.396 283.891 186.53 284.361 186.523 cv
284.471 186.523 li
284.471 186.986 li
280.661 186.986 li
280.661 186.523 li
280.821 186.523 li
281.304 186.53 281.616 186.396 281.756 186.121 cv
281.817 186 281.85 185.866 281.857 185.719 cv
281.863 185.564 281.87 185.039 281.877 184.14 cv
281.877 181.465 li
281.877 180.869 281.863 180.477 281.837 180.289 cv
281.817 180.094 281.756 179.903 281.656 179.716 cv
281.401 179.233 280.989 178.992 280.419 178.992 cv
279.561 178.992 278.787 179.582 278.096 180.761 cv
278.096 184.14 li
278.096 184.964 278.1 185.471 278.106 185.658 cv
278.12 185.846 278.156 186 278.217 186.121 cv
278.358 186.396 278.669 186.53 279.152 186.523 cv
279.252 186.523 li
279.252 186.986 li
275.482 186.986 li
275.482 186.523 li
275.613 186.523 li
276.082 186.53 276.387 186.396 276.528 186.121 cv
276.588 186 276.621 185.846 276.628 185.658 cv
276.641 185.464 276.648 184.958 276.648 184.14 cv
276.648 181.677 li
276.648 180.859 276.641 180.352 276.628 180.158 cv
276.621 179.964 276.588 179.806 276.528 179.685 cv
276.393 179.418 276.085 179.287 275.602 179.293 cv
275.482 179.293 li
275.482 178.831 li
276.146 178.744 276.836 178.586 277.553 178.358 cv
f
18.3141 181.093 mo
18.2801 181.616 18.2332 182.418 18.2332 182.672 cv
18.2332 184.019 18.4211 185.018 18.7965 185.668 cv
19.2254 186.406 19.8219 186.775 20.5863 186.775 cv
21.1094 186.775 21.5648 186.634 21.9539 186.352 cv
22.3492 186.071 22.6508 185.662 22.859 185.125 cv
23.3012 185.125 li
23.107 185.769 22.7516 186.285 22.2355 186.674 cv
21.6523 187.103 20.9918 187.317 20.2547 187.318 cv
19.3426 187.318 18.5383 186.979 17.8414 186.302 cv
16.9766 185.464 16.5441 184.332 16.5441 182.903 cv
16.5441 181.576 16.9125 180.469 17.6504 179.585 cv
18.327 178.767 19.1684 178.358 20.1742 178.358 cv
21.0391 178.358 21.766 178.657 22.3559 179.253 cv
22.9527 179.85 23.2676 180.6 23.3012 181.505 cv
18.2875 181.505 li
18.3129 181.093 li
21.7023 181.093 li
21.7227 180.946 21.7328 180.805 21.7328 180.671 cv
21.7328 180.115 21.5852 179.666 21.2902 179.323 cv
20.9953 178.975 20.6098 178.801 20.134 178.801 cv
19.5035 178.801 19.0176 179.109 18.6758 179.726 cv
18.5148 180.001 18.3941 180.457 18.3141 181.093 cv
ef
18.3141 181.093 mo
18.2801 181.616 18.2332 182.418 18.2332 182.672 cv
18.2332 184.019 18.4211 185.018 18.7965 185.668 cv
19.2254 186.406 19.8219 186.775 20.5863 186.775 cv
21.1094 186.775 21.5648 186.634 21.9539 186.352 cv
22.3492 186.071 22.6508 185.662 22.859 185.125 cv
23.3012 185.125 li
23.107 185.769 22.7516 186.285 22.2355 186.674 cv
21.6523 187.103 20.9918 187.317 20.2547 187.318 cv
19.3426 187.318 18.5383 186.979 17.8414 186.302 cv
16.9766 185.464 16.5441 184.332 16.5441 182.903 cv
16.5441 181.576 16.9125 180.469 17.6504 179.585 cv
18.327 178.767 19.1684 178.358 20.1742 178.358 cv
21.0391 178.358 21.766 178.657 22.3559 179.253 cv
22.9527 179.85 23.2676 180.6 23.3012 181.505 cv
18.2875 181.505 li
18.3129 181.093 li
21.7023 181.093 li
21.7227 180.946 21.7328 180.805 21.7328 180.671 cv
21.7328 180.115 21.5852 179.666 21.2902 179.323 cv
20.9953 178.975 20.6098 178.801 20.134 178.801 cv
19.5035 178.801 19.0176 179.109 18.6758 179.726 cv
18.5148 180.001 18.3941 180.457 18.3141 181.093 cv
cp
@
42.5023 181.093 mo
42.4688 181.616 42.4223 182.418 42.4223 182.672 cv
42.4223 184.019 42.6098 185.018 42.9852 185.668 cv
43.4141 186.406 44.0105 186.775 44.775 186.775 cv
45.298 186.775 45.7535 186.634 46.1426 186.352 cv
46.5379 186.071 46.8395 185.662 47.0477 185.125 cv
47.4898 185.125 li
47.2953 185.769 46.9398 186.285 46.4242 186.674 cv
45.841 187.103 45.1805 187.317 44.4434 187.318 cv
43.5313 187.318 42.727 186.979 42.0297 186.302 cv
41.1652 185.464 40.7328 184.332 40.7328 182.903 cv
40.7328 181.576 41.1016 180.469 41.8387 179.585 cv
42.5156 178.767 43.357 178.358 44.3629 178.358 cv
45.2277 178.358 45.9547 178.657 46.5449 179.253 cv
47.141 179.85 47.4563 180.6 47.4898 181.505 cv
42.4762 181.505 li
42.502 181.093 li
45.891 181.093 li
45.9113 180.946 45.9215 180.805 45.9215 180.671 cv
45.9215 180.115 45.7738 179.666 45.4789 179.323 cv
45.184 178.975 44.7984 178.801 44.3227 178.801 cv
43.6922 178.801 43.2063 179.109 42.8645 179.726 cv
42.7035 180.001 42.5828 180.457 42.5023 181.093 cv
ef
42.5023 181.093 mo
42.4688 181.616 42.4223 182.418 42.4223 182.672 cv
42.4223 184.019 42.6098 185.018 42.9852 185.668 cv
43.4141 186.406 44.0105 186.775 44.775 186.775 cv
45.298 186.775 45.7535 186.634 46.1426 186.352 cv
46.5379 186.071 46.8395 185.662 47.0477 185.125 cv
47.4898 185.125 li
47.2953 185.769 46.9398 186.285 46.4242 186.674 cv
45.841 187.103 45.1805 187.317 44.4434 187.318 cv
43.5313 187.318 42.727 186.979 42.0297 186.302 cv
41.1652 185.464 40.7328 184.332 40.7328 182.903 cv
40.7328 181.576 41.1016 180.469 41.8387 179.585 cv
42.5156 178.767 43.357 178.358 44.3629 178.358 cv
45.2277 178.358 45.9547 178.657 46.5449 179.253 cv
47.141 179.85 47.4563 180.6 47.4898 181.505 cv
42.4762 181.505 li
42.502 181.093 li
45.891 181.093 li
45.9113 180.946 45.9215 180.805 45.9215 180.671 cv
45.9215 180.115 45.7738 179.666 45.4789 179.323 cv
45.184 178.975 44.7984 178.801 44.3227 178.801 cv
43.6922 178.801 43.2063 179.109 42.8645 179.726 cv
42.7035 180.001 42.5828 180.457 42.5023 181.093 cv
cp
@
70.5961 187.318 mo
70.1402 187.318 69.6594 187.227 69.1836 187.046 cv
68.7074 186.865 68.302 186.624 67.9668 186.322 cv
67.0551 185.498 66.5992 184.314 66.5992 182.773 cv
66.5992 181.378 67.0586 180.255 67.977 179.404 cv
68.7141 178.72 69.5824 178.371 70.5813 178.358 cv
71.5734 178.358 72.4379 178.707 73.1754 179.404 cv
74.0938 180.275 74.5527 181.418 74.5531 182.833 cv
74.5531 183.818 74.3285 184.693 73.8793 185.457 cv
73.477 186.141 72.9039 186.644 72.1598 186.966 cv
71.6234 187.2 71.0973 187.317 70.5813 187.318 cv
70.5813 186.855 li
69.8637 186.855 69.3043 186.567 68.902 185.99 cv
68.4926 185.407 68.2887 184.358 68.2887 182.843 cv
68.2887 181.294 68.5129 180.222 68.9621 179.625 cv
69.3512 179.096 69.8906 178.831 70.5813 178.831 cv
71.1977 178.837 71.7004 179.059 72.0895 179.494 cv
72.6055 180.071 72.8637 181.21 72.8637 182.913 cv
72.8637 184.268 72.6793 185.263 72.3109 185.9 cv
71.9418 186.537 71.3805 186.855 70.5961 186.855 cv
70.5961 187.318 li
ef
70.5961 187.318 mo
70.1402 187.318 69.6594 187.227 69.1836 187.046 cv
68.7074 186.865 68.302 186.624 67.9668 186.322 cv
67.0551 185.498 66.5992 184.314 66.5992 182.773 cv
66.5992 181.378 67.0586 180.255 67.977 179.404 cv
68.7141 178.72 69.5824 178.371 70.5813 178.358 cv
71.5734 178.358 72.4379 178.707 73.1754 179.404 cv
74.0938 180.275 74.5527 181.418 74.5531 182.833 cv
74.5531 183.818 74.3285 184.693 73.8793 185.457 cv
73.477 186.141 72.9039 186.644 72.1598 186.966 cv
71.6234 187.2 71.0973 187.317 70.5813 187.318 cv
70.5813 186.855 li
69.8637 186.855 69.3043 186.567 68.902 185.99 cv
68.4926 185.407 68.2887 184.358 68.2887 182.843 cv
68.2887 181.294 68.5129 180.222 68.9621 179.625 cv
69.3512 179.096 69.8906 178.831 70.5813 178.831 cv
71.1977 178.837 71.7004 179.059 72.0895 179.494 cv
72.6055 180.071 72.8637 181.21 72.8637 182.913 cv
72.8637 184.268 72.6793 185.263 72.3109 185.9 cv
71.9418 186.537 71.3805 186.855 70.5961 186.855 cv
70.5961 187.318 li
cp
@
107.355 178.821 mo
106.866 178.821 106.476 179.059 106.215 179.535 cv
105.953 180.004 105.823 180.674 105.823 181.546 cv
105.823 182.458 105.977 183.131 106.285 183.567 cv
106.553 183.956 106.915 184.15 107.371 184.15 cv
107.867 184.15 108.245 183.922 108.507 183.466 cv
108.775 183.004 108.909 182.337 108.909 181.465 cv
108.909 180.567 108.775 179.914 108.507 179.504 cv
108.212 179.055 107.823 178.828 107.341 178.821 cv
107.341 178.358 li
106.55 178.358 105.866 178.623 105.289 179.152 cv
104.626 179.756 104.294 180.5 104.294 181.385 cv
104.294 182.598 104.874 183.577 106.034 184.321 cv
104.921 184.549 104.364 185.109 104.364 186 cv
104.364 186.617 104.676 187.056 105.3 187.318 cv
105.722 187.492 106.436 187.605 107.441 187.659 cv
108.098 187.686 108.544 187.72 108.779 187.76 cv
109.02 187.8 109.264 187.88 109.513 188.002 cv
110.123 188.296 110.428 188.819 110.428 189.57 cv
110.428 190.234 110.166 190.757 109.644 191.139 cv
109.154 191.5 108.504 191.682 107.693 191.682 cv
106.667 191.682 105.889 191.44 105.36 190.958 cv
104.984 190.622 104.797 190.173 104.797 189.61 cv
104.797 189.128 104.958 188.645 105.28 188.162 cv
105.192 188.129 105.105 188.112 105.018 188.112 cv
104.676 188.112 104.401 188.236 104.193 188.484 cv
103.993 188.738 103.892 189.08 103.892 189.51 cv
103.892 190.166 104.14 190.713 104.636 191.148 cv
105.353 191.779 106.359 192.094 107.653 192.094 cv
108.819 192.093 109.737 191.836 110.408 191.32 cv
111.105 190.783 111.454 190.049 111.454 189.117 cv
111.453 188.152 111.118 187.425 110.448 186.936 cv
109.938 186.567 109.023 186.342 107.703 186.262 cv
106.845 186.215 106.298 186.171 106.064 186.131 cv
105.48 186.037 105.189 185.819 105.189 185.477 cv
105.189 184.948 105.823 184.66 107.089 184.613 cv
107.907 184.579 108.561 184.418 109.05 184.13 cv
109.493 183.869 109.838 183.5 110.086 183.024 cv
110.341 182.548 110.468 182.018 110.468 181.435 cv
110.468 180.825 110.311 180.242 109.995 179.685 cv
110.277 179.337 110.535 179.162 110.77 179.162 cv
110.911 179.163 111.048 179.29 111.182 179.545 cv
111.329 179.819 111.504 179.957 111.705 179.957 cv
111.859 179.957 111.987 179.896 112.087 179.776 cv
112.194 179.648 112.248 179.491 112.248 179.303 cv
112.248 179.062 112.161 178.861 111.987 178.7 cv
111.812 178.533 111.594 178.449 111.333 178.449 cv
110.803 178.449 110.28 178.774 109.764 179.424 cv
109.154 178.714 108.361 178.358 107.355 178.358 cv
107.355 178.821 li
ef
107.355 178.821 mo
106.866 178.821 106.476 179.059 106.215 179.535 cv
105.953 180.004 105.823 180.674 105.823 181.546 cv
105.823 182.458 105.977 183.131 106.285 183.567 cv
106.553 183.956 106.915 184.15 107.371 184.15 cv
107.867 184.15 108.245 183.922 108.507 183.466 cv
108.775 183.004 108.909 182.337 108.909 181.465 cv
108.909 180.567 108.775 179.914 108.507 179.504 cv
108.212 179.055 107.823 178.828 107.341 178.821 cv
107.341 178.358 li
106.55 178.358 105.866 178.623 105.289 179.152 cv
104.626 179.756 104.294 180.5 104.294 181.385 cv
104.294 182.598 104.874 183.577 106.034 184.321 cv
104.921 184.549 104.364 185.109 104.364 186 cv
104.364 186.617 104.676 187.056 105.3 187.318 cv
105.722 187.492 106.436 187.605 107.441 187.659 cv
108.098 187.686 108.544 187.72 108.779 187.76 cv
109.02 187.8 109.264 187.88 109.513 188.002 cv
110.123 188.296 110.428 188.819 110.428 189.57 cv
110.428 190.234 110.166 190.757 109.644 191.139 cv
109.154 191.5 108.504 191.682 107.693 191.682 cv
106.667 191.682 105.889 191.44 105.36 190.958 cv
104.984 190.622 104.797 190.173 104.797 189.61 cv
104.797 189.128 104.958 188.645 105.28 188.162 cv
105.192 188.129 105.105 188.112 105.018 188.112 cv
104.676 188.112 104.401 188.236 104.193 188.484 cv
103.993 188.738 103.892 189.08 103.892 189.51 cv
103.892 190.166 104.14 190.713 104.636 191.148 cv
105.353 191.779 106.359 192.094 107.653 192.094 cv
108.819 192.093 109.737 191.836 110.408 191.32 cv
111.105 190.783 111.454 190.049 111.454 189.117 cv
111.453 188.152 111.118 187.425 110.448 186.936 cv
109.938 186.567 109.023 186.342 107.703 186.262 cv
106.845 186.215 106.298 186.171 106.064 186.131 cv
105.48 186.037 105.189 185.819 105.189 185.477 cv
105.189 184.948 105.823 184.66 107.089 184.613 cv
107.907 184.579 108.561 184.418 109.05 184.13 cv
109.493 183.869 109.838 183.5 110.086 183.024 cv
110.341 182.548 110.468 182.018 110.468 181.435 cv
110.468 180.825 110.311 180.242 109.995 179.685 cv
110.277 179.337 110.535 179.162 110.77 179.162 cv
110.911 179.163 111.048 179.29 111.182 179.545 cv
111.329 179.819 111.504 179.957 111.705 179.957 cv
111.859 179.957 111.987 179.896 112.087 179.776 cv
112.194 179.648 112.248 179.491 112.248 179.303 cv
112.248 179.062 112.161 178.861 111.987 178.7 cv
111.812 178.533 111.594 178.449 111.333 178.449 cv
110.803 178.449 110.28 178.774 109.764 179.424 cv
109.154 178.714 108.361 178.358 107.355 178.358 cv
107.355 178.821 li
cp
@
128.211 181.918 mo
128.211 185.196 li
127.327 186.034 126.613 186.453 126.07 186.453 cv
125.761 186.453 125.513 186.322 125.325 186.061 cv
125.138 185.793 125.044 185.447 125.044 185.025 cv
125.044 184.502 125.235 184.006 125.617 183.537 cv
126.006 183.068 126.539 182.679 127.216 182.37 cv
128.226 181.918 li
128.24 181.918 li
128.24 181.428 li
128.226 181.435 li
128.211 181.033 li
128.211 180.363 128.161 179.91 128.061 179.675 cv
127.799 179.092 127.279 178.801 126.502 178.801 cv
125.858 178.801 125.416 178.951 125.175 179.253 cv
125.074 179.38 125 179.605 124.954 179.927 cv
124.859 180.537 124.611 180.842 124.209 180.842 cv
124.041 180.842 123.904 180.789 123.797 180.681 cv
123.696 180.567 123.646 180.423 123.646 180.248 cv
123.646 179.86 123.861 179.478 124.289 179.102 cv
124.866 178.606 125.667 178.358 126.693 178.358 cv
127.953 178.358 128.808 178.764 129.257 179.575 cv
129.364 179.776 129.434 179.98 129.468 180.188 cv
129.502 180.396 129.518 180.755 129.518 181.264 cv
129.518 184.613 li
129.518 185.404 129.545 185.873 129.599 186.02 cv
129.693 186.309 129.86 186.453 130.102 186.453 cv
130.504 186.453 130.752 186.121 130.846 185.457 cv
131.188 185.457 li
131.168 186 131.02 186.426 130.745 186.734 cv
130.477 187.043 130.115 187.196 129.659 187.197 cv
128.861 187.197 128.379 186.711 128.211 185.739 cv
126.971 186.711 125.969 187.196 125.205 187.197 cv
124.668 187.197 124.226 187.029 123.877 186.694 cv
123.529 186.359 123.354 185.933 123.354 185.417 cv
123.354 184.8 123.626 184.231 124.169 183.708 cv
124.712 183.178 125.587 182.639 126.793 182.089 cv
128.211 181.435 li
128.211 181.918 li
ef
128.211 181.918 mo
128.211 185.196 li
127.327 186.034 126.613 186.453 126.07 186.453 cv
125.761 186.453 125.513 186.322 125.325 186.061 cv
125.138 185.793 125.044 185.447 125.044 185.025 cv
125.044 184.502 125.235 184.006 125.617 183.537 cv
126.006 183.068 126.539 182.679 127.216 182.37 cv
128.226 181.918 li
128.24 181.918 li
128.24 181.428 li
128.226 181.435 li
128.211 181.033 li
128.211 180.363 128.161 179.91 128.061 179.675 cv
127.799 179.092 127.279 178.801 126.502 178.801 cv
125.858 178.801 125.416 178.951 125.175 179.253 cv
125.074 179.38 125 179.605 124.954 179.927 cv
124.859 180.537 124.611 180.842 124.209 180.842 cv
124.041 180.842 123.904 180.789 123.797 180.681 cv
123.696 180.567 123.646 180.423 123.646 180.248 cv
123.646 179.86 123.861 179.478 124.289 179.102 cv
124.866 178.606 125.667 178.358 126.693 178.358 cv
127.953 178.358 128.808 178.764 129.257 179.575 cv
129.364 179.776 129.434 179.98 129.468 180.188 cv
129.502 180.396 129.518 180.755 129.518 181.264 cv
129.518 184.613 li
129.518 185.404 129.545 185.873 129.599 186.02 cv
129.693 186.309 129.86 186.453 130.102 186.453 cv
130.504 186.453 130.752 186.121 130.846 185.457 cv
131.188 185.457 li
131.168 186 131.02 186.426 130.745 186.734 cv
130.477 187.043 130.115 187.196 129.659 187.197 cv
128.861 187.197 128.379 186.711 128.211 185.739 cv
126.971 186.711 125.969 187.196 125.205 187.197 cv
124.668 187.197 124.226 187.029 123.877 186.694 cv
123.529 186.359 123.354 185.933 123.354 185.417 cv
123.354 184.8 123.626 184.231 124.169 183.708 cv
124.712 183.178 125.587 182.639 126.793 182.089 cv
128.211 181.435 li
128.211 181.918 li
cp
@
186.465 181.918 mo
186.465 185.196 li
185.58 186.034 184.866 186.453 184.323 186.453 cv
184.014 186.453 183.766 186.322 183.579 186.061 cv
183.391 185.793 183.297 185.447 183.297 185.025 cv
183.297 184.502 183.488 184.006 183.87 183.537 cv
184.259 183.068 184.792 182.679 185.469 182.37 cv
186.48 181.918 li
186.493 181.918 li
186.493 181.428 li
186.48 181.435 li
186.465 181.033 li
186.465 180.363 186.414 179.91 186.314 179.675 cv
186.053 179.092 185.533 178.801 184.755 178.801 cv
184.112 178.801 183.669 178.951 183.428 179.253 cv
183.327 179.38 183.254 179.605 183.207 179.927 cv
183.113 180.537 182.865 180.842 182.463 180.842 cv
182.295 180.842 182.157 180.789 182.05 180.681 cv
181.95 180.567 181.9 180.423 181.9 180.248 cv
181.9 179.86 182.114 179.478 182.543 179.102 cv
183.12 178.606 183.92 178.358 184.946 178.358 cv
186.206 178.358 187.061 178.764 187.511 179.575 cv
187.618 179.776 187.688 179.98 187.722 180.188 cv
187.755 180.396 187.771 180.755 187.772 181.264 cv
187.772 184.613 li
187.772 185.404 187.799 185.873 187.852 186.02 cv
187.946 186.309 188.113 186.453 188.355 186.453 cv
188.757 186.453 189.005 186.121 189.099 185.457 cv
189.441 185.457 li
189.421 186 189.273 186.426 188.998 186.734 cv
188.73 187.043 188.368 187.196 187.913 187.197 cv
187.115 187.197 186.632 186.711 186.465 185.739 cv
185.225 186.711 184.223 187.196 183.458 187.197 cv
182.922 187.197 182.479 187.029 182.131 186.694 cv
181.782 186.359 181.608 185.933 181.608 185.417 cv
181.608 184.8 181.879 184.231 182.422 183.708 cv
182.965 183.178 183.84 182.639 185.047 182.089 cv
186.465 181.435 li
186.465 181.918 li
ef
186.465 181.918 mo
186.465 185.196 li
185.58 186.034 184.866 186.453 184.323 186.453 cv
184.014 186.453 183.766 186.322 183.579 186.061 cv
183.391 185.793 183.297 185.447 183.297 185.025 cv
183.297 184.502 183.488 184.006 183.87 183.537 cv
184.259 183.068 184.792 182.679 185.469 182.37 cv
186.48 181.918 li
186.493 181.918 li
186.493 181.428 li
186.48 181.435 li
186.465 181.033 li
186.465 180.363 186.414 179.91 186.314 179.675 cv
186.053 179.092 185.533 178.801 184.755 178.801 cv
184.112 178.801 183.669 178.951 183.428 179.253 cv
183.327 179.38 183.254 179.605 183.207 179.927 cv
183.113 180.537 182.865 180.842 182.463 180.842 cv
182.295 180.842 182.157 180.789 182.05 180.681 cv
181.95 180.567 181.9 180.423 181.9 180.248 cv
181.9 179.86 182.114 179.478 182.543 179.102 cv
183.12 178.606 183.92 178.358 184.946 178.358 cv
186.206 178.358 187.061 178.764 187.511 179.575 cv
187.618 179.776 187.688 179.98 187.722 180.188 cv
187.755 180.396 187.771 180.755 187.772 181.264 cv
187.772 184.613 li
187.772 185.404 187.799 185.873 187.852 186.02 cv
187.946 186.309 188.113 186.453 188.355 186.453 cv
188.757 186.453 189.005 186.121 189.099 185.457 cv
189.441 185.457 li
189.421 186 189.273 186.426 188.998 186.734 cv
188.73 187.043 188.368 187.196 187.913 187.197 cv
187.115 187.197 186.632 186.711 186.465 185.739 cv
185.225 186.711 184.223 187.196 183.458 187.197 cv
182.922 187.197 182.479 187.029 182.131 186.694 cv
181.782 186.359 181.608 185.933 181.608 185.417 cv
181.608 184.8 181.879 184.231 182.422 183.708 cv
182.965 183.178 183.84 182.639 185.047 182.089 cv
186.465 181.435 li
186.465 181.918 li
cp
@
193.657 178.821 mo
193.168 178.821 192.778 179.059 192.516 179.535 cv
192.255 180.004 192.124 180.674 192.124 181.546 cv
192.124 182.458 192.278 183.131 192.587 183.567 cv
192.855 183.956 193.217 184.15 193.673 184.15 cv
194.168 184.15 194.547 183.922 194.809 183.466 cv
195.077 183.004 195.211 182.337 195.211 181.465 cv
195.211 180.567 195.077 179.914 194.809 179.504 cv
194.514 179.055 194.125 178.828 193.643 178.821 cv
193.643 178.358 li
192.852 178.358 192.168 178.623 191.591 179.152 cv
190.928 179.756 190.596 180.5 190.596 181.385 cv
190.596 182.598 191.175 183.577 192.335 184.321 cv
191.222 184.549 190.666 185.109 190.666 186 cv
190.666 186.617 190.978 187.056 191.602 187.318 cv
192.023 187.492 192.738 187.605 193.743 187.659 cv
194.4 187.686 194.846 187.72 195.08 187.76 cv
195.322 187.8 195.566 187.88 195.814 188.002 cv
196.424 188.296 196.73 188.819 196.73 189.57 cv
196.73 190.234 196.468 190.757 195.945 191.139 cv
195.455 191.5 194.805 191.682 193.995 191.682 cv
192.969 191.682 192.191 191.44 191.662 190.958 cv
191.286 190.622 191.098 190.173 191.098 189.61 cv
191.098 189.128 191.259 188.645 191.581 188.162 cv
191.494 188.129 191.407 188.112 191.32 188.112 cv
190.977 188.112 190.703 188.236 190.495 188.484 cv
190.294 188.738 190.193 189.08 190.193 189.51 cv
190.193 190.166 190.441 190.713 190.938 191.148 cv
191.655 191.779 192.66 192.094 193.954 192.094 cv
195.121 192.093 196.039 191.836 196.709 191.32 cv
197.406 190.783 197.755 190.049 197.755 189.117 cv
197.755 188.152 197.42 187.425 196.75 186.936 cv
196.24 186.567 195.325 186.342 194.004 186.262 cv
193.146 186.215 192.6 186.171 192.366 186.131 cv
191.782 186.037 191.491 185.819 191.491 185.477 cv
191.491 184.948 192.124 184.66 193.391 184.613 cv
194.209 184.579 194.863 184.418 195.352 184.13 cv
195.794 183.869 196.139 183.5 196.388 183.024 cv
196.642 182.548 196.77 182.018 196.77 181.435 cv
196.77 180.825 196.612 180.242 196.297 179.685 cv
196.579 179.337 196.837 179.162 197.071 179.162 cv
197.212 179.163 197.35 179.29 197.484 179.545 cv
197.631 179.819 197.805 179.957 198.007 179.957 cv
198.161 179.957 198.288 179.896 198.389 179.776 cv
198.496 179.648 198.55 179.491 198.55 179.303 cv
198.549 179.062 198.462 178.861 198.288 178.7 cv
198.114 178.533 197.896 178.449 197.635 178.449 cv
197.105 178.449 196.582 178.774 196.066 179.424 cv
195.455 178.714 194.663 178.358 193.657 178.358 cv
193.657 178.821 li
ef
193.657 178.821 mo
193.168 178.821 192.778 179.059 192.516 179.535 cv
192.255 180.004 192.124 180.674 192.124 181.546 cv
192.124 182.458 192.278 183.131 192.587 183.567 cv
192.855 183.956 193.217 184.15 193.673 184.15 cv
194.168 184.15 194.547 183.922 194.809 183.466 cv
195.077 183.004 195.211 182.337 195.211 181.465 cv
195.211 180.567 195.077 179.914 194.809 179.504 cv
194.514 179.055 194.125 178.828 193.643 178.821 cv
193.643 178.358 li
192.852 178.358 192.168 178.623 191.591 179.152 cv
190.928 179.756 190.596 180.5 190.596 181.385 cv
190.596 182.598 191.175 183.577 192.335 184.321 cv
191.222 184.549 190.666 185.109 190.666 186 cv
190.666 186.617 190.978 187.056 191.602 187.318 cv
192.023 187.492 192.738 187.605 193.743 187.659 cv
194.4 187.686 194.846 187.72 195.08 187.76 cv
195.322 187.8 195.566 187.88 195.814 188.002 cv
196.424 188.296 196.73 188.819 196.73 189.57 cv
196.73 190.234 196.468 190.757 195.945 191.139 cv
195.455 191.5 194.805 191.682 193.995 191.682 cv
192.969 191.682 192.191 191.44 191.662 190.958 cv
191.286 190.622 191.098 190.173 191.098 189.61 cv
191.098 189.128 191.259 188.645 191.581 188.162 cv
191.494 188.129 191.407 188.112 191.32 188.112 cv
190.977 188.112 190.703 188.236 190.495 188.484 cv
190.294 188.738 190.193 189.08 190.193 189.51 cv
190.193 190.166 190.441 190.713 190.938 191.148 cv
191.655 191.779 192.66 192.094 193.954 192.094 cv
195.121 192.093 196.039 191.836 196.709 191.32 cv
197.406 190.783 197.755 190.049 197.755 189.117 cv
197.755 188.152 197.42 187.425 196.75 186.936 cv
196.24 186.567 195.325 186.342 194.004 186.262 cv
193.146 186.215 192.6 186.171 192.366 186.131 cv
191.782 186.037 191.491 185.819 191.491 185.477 cv
191.491 184.948 192.124 184.66 193.391 184.613 cv
194.209 184.579 194.863 184.418 195.352 184.13 cv
195.794 183.869 196.139 183.5 196.388 183.024 cv
196.642 182.548 196.77 182.018 196.77 181.435 cv
196.77 180.825 196.612 180.242 196.297 179.685 cv
196.579 179.337 196.837 179.162 197.071 179.162 cv
197.212 179.163 197.35 179.29 197.484 179.545 cv
197.631 179.819 197.805 179.957 198.007 179.957 cv
198.161 179.957 198.288 179.896 198.389 179.776 cv
198.496 179.648 198.55 179.491 198.55 179.303 cv
198.549 179.062 198.462 178.861 198.288 178.7 cv
198.114 178.533 197.896 178.449 197.635 178.449 cv
197.105 178.449 196.582 178.774 196.066 179.424 cv
195.455 178.714 194.663 178.358 193.657 178.358 cv
193.657 178.821 li
cp
@
235.133 187.318 mo
234.677 187.318 234.196 187.227 233.721 187.046 cv
233.245 186.865 232.839 186.624 232.504 186.322 cv
231.592 185.498 231.137 184.314 231.137 182.773 cv
231.137 181.378 231.596 180.255 232.514 179.404 cv
233.251 178.72 234.12 178.371 235.118 178.358 cv
236.111 178.358 236.975 178.707 237.713 179.404 cv
238.631 180.275 239.09 181.418 239.09 182.833 cv
239.09 183.818 238.866 184.693 238.416 185.457 cv
238.014 186.141 237.441 186.644 236.697 186.966 cv
236.161 187.2 235.635 187.317 235.118 187.318 cv
235.118 186.855 li
234.401 186.855 233.841 186.567 233.439 185.99 cv
233.03 185.407 232.826 184.358 232.826 182.843 cv
232.826 181.294 233.05 180.222 233.5 179.625 cv
233.888 179.096 234.428 178.831 235.118 178.831 cv
235.735 178.837 236.238 179.059 236.627 179.494 cv
237.143 180.071 237.401 181.21 237.401 182.913 cv
237.401 184.268 237.217 185.263 236.848 185.9 cv
236.479 186.537 235.918 186.855 235.133 186.855 cv
235.133 187.318 li
ef
235.133 187.318 mo
234.677 187.318 234.196 187.227 233.721 187.046 cv
233.245 186.865 232.839 186.624 232.504 186.322 cv
231.592 185.498 231.137 184.314 231.137 182.773 cv
231.137 181.378 231.596 180.255 232.514 179.404 cv
233.251 178.72 234.12 178.371 235.118 178.358 cv
236.111 178.358 236.975 178.707 237.713 179.404 cv
238.631 180.275 239.09 181.418 239.09 182.833 cv
239.09 183.818 238.866 184.693 238.416 185.457 cv
238.014 186.141 237.441 186.644 236.697 186.966 cv
236.161 187.2 235.635 187.317 235.118 187.318 cv
235.118 186.855 li
234.401 186.855 233.841 186.567 233.439 185.99 cv
233.03 185.407 232.826 184.358 232.826 182.843 cv
232.826 181.294 233.05 180.222 233.5 179.625 cv
233.888 179.096 234.428 178.831 235.118 178.831 cv
235.735 178.837 236.238 179.059 236.627 179.494 cv
237.143 180.071 237.401 181.21 237.401 182.913 cv
237.401 184.268 237.217 185.263 236.848 185.9 cv
236.479 186.537 235.918 186.855 235.133 186.855 cv
235.133 187.318 li
cp
@
250.894 181.093 mo
250.86 181.616 250.813 182.418 250.813 182.672 cv
250.813 184.019 251.001 185.018 251.377 185.668 cv
251.805 186.406 252.402 186.775 253.166 186.775 cv
253.689 186.775 254.145 186.634 254.534 186.352 cv
254.929 186.071 255.231 185.662 255.439 185.125 cv
255.881 185.125 li
255.687 185.769 255.331 186.285 254.816 186.674 cv
254.232 187.103 253.571 187.317 252.834 187.318 cv
251.923 187.318 251.118 186.979 250.421 186.302 cv
249.557 185.464 249.124 184.332 249.124 182.903 cv
249.124 181.576 249.493 180.469 250.23 179.585 cv
250.907 178.767 251.748 178.358 252.754 178.358 cv
253.619 178.358 254.346 178.657 254.936 179.253 cv
255.532 179.85 255.848 180.6 255.881 181.505 cv
250.867 181.505 li
250.893 181.093 li
254.282 181.093 li
254.303 180.946 254.313 180.805 254.313 180.671 cv
254.313 180.115 254.165 179.666 253.87 179.323 cv
253.575 178.975 253.189 178.801 252.714 178.801 cv
252.084 178.801 251.598 179.109 251.256 179.726 cv
251.095 180.001 250.974 180.457 250.894 181.093 cv
ef
250.894 181.093 mo
250.86 181.616 250.813 182.418 250.813 182.672 cv
250.813 184.019 251.001 185.018 251.377 185.668 cv
251.805 186.406 252.402 186.775 253.166 186.775 cv
253.689 186.775 254.145 186.634 254.534 186.352 cv
254.929 186.071 255.231 185.662 255.439 185.125 cv
255.881 185.125 li
255.687 185.769 255.331 186.285 254.816 186.674 cv
254.232 187.103 253.571 187.317 252.834 187.318 cv
251.923 187.318 251.118 186.979 250.421 186.302 cv
249.557 185.464 249.124 184.332 249.124 182.903 cv
249.124 181.576 249.493 180.469 250.23 179.585 cv
250.907 178.767 251.748 178.358 252.754 178.358 cv
253.619 178.358 254.346 178.657 254.936 179.253 cv
255.532 179.85 255.848 180.6 255.881 181.505 cv
250.867 181.505 li
250.893 181.093 li
254.282 181.093 li
254.303 180.946 254.313 180.805 254.313 180.671 cv
254.313 180.115 254.165 179.666 253.87 179.323 cv
253.575 178.975 253.189 178.801 252.714 178.801 cv
252.084 178.801 251.598 179.109 251.256 179.726 cv
251.095 180.001 250.974 180.457 250.894 181.093 cv
cp
@
289.189 178.821 mo
288.7 178.821 288.31 179.059 288.049 179.535 cv
287.787 180.004 287.657 180.674 287.657 181.546 cv
287.657 182.458 287.811 183.131 288.119 183.567 cv
288.387 183.956 288.749 184.15 289.205 184.15 cv
289.701 184.15 290.079 183.922 290.341 183.466 cv
290.609 183.004 290.743 182.337 290.743 181.465 cv
290.743 180.567 290.609 179.914 290.341 179.504 cv
290.046 179.055 289.657 178.828 289.175 178.821 cv
289.175 178.358 li
288.384 178.358 287.7 178.623 287.123 179.152 cv
286.46 179.756 286.128 180.5 286.128 181.385 cv
286.128 182.598 286.708 183.577 287.868 184.321 cv
286.754 184.549 286.198 185.109 286.198 186 cv
286.198 186.617 286.51 187.056 287.134 187.318 cv
287.556 187.492 288.27 187.605 289.275 187.659 cv
289.932 187.686 290.378 187.72 290.613 187.76 cv
290.854 187.8 291.098 187.88 291.347 188.002 cv
291.957 188.296 292.262 188.819 292.262 189.57 cv
292.262 190.234 292 190.757 291.478 191.139 cv
290.988 191.5 290.338 191.682 289.527 191.682 cv
288.501 191.682 287.723 191.44 287.194 190.958 cv
286.818 190.622 286.631 190.173 286.631 189.61 cv
286.631 189.128 286.791 188.645 287.113 188.162 cv
287.026 188.129 286.939 188.112 286.852 188.112 cv
286.51 188.112 286.235 188.236 286.027 188.484 cv
285.827 188.738 285.726 189.08 285.726 189.51 cv
285.726 190.166 285.974 190.713 286.47 191.148 cv
287.187 191.779 288.193 192.094 289.487 192.094 cv
290.653 192.093 291.571 191.836 292.242 191.32 cv
292.939 190.783 293.288 190.049 293.288 189.117 cv
293.287 188.152 292.952 187.425 292.282 186.936 cv
291.772 186.567 290.857 186.342 289.537 186.262 cv
288.679 186.215 288.132 186.171 287.898 186.131 cv
287.314 186.037 287.023 185.819 287.023 185.477 cv
287.023 184.948 287.657 184.66 288.923 184.613 cv
289.741 184.579 290.395 184.418 290.884 184.13 cv
291.327 183.869 291.672 183.5 291.92 183.024 cv
292.174 182.548 292.302 182.018 292.302 181.435 cv
292.302 180.825 292.145 180.242 291.829 179.685 cv
292.111 179.337 292.369 179.162 292.604 179.162 cv
292.745 179.163 292.882 179.29 293.016 179.545 cv
293.163 179.819 293.338 179.957 293.539 179.957 cv
293.693 179.957 293.82 179.896 293.921 179.776 cv
294.028 179.648 294.082 179.491 294.082 179.303 cv
294.082 179.062 293.995 178.861 293.82 178.7 cv
293.646 178.533 293.428 178.449 293.167 178.449 cv
292.637 178.449 292.114 178.774 291.598 179.424 cv
290.988 178.714 290.195 178.358 289.189 178.358 cv
289.189 178.821 li
ef
289.189 178.821 mo
288.7 178.821 288.31 179.059 288.049 179.535 cv
287.787 180.004 287.657 180.674 287.657 181.546 cv
287.657 182.458 287.811 183.131 288.119 183.567 cv
288.387 183.956 288.749 184.15 289.205 184.15 cv
289.701 184.15 290.079 183.922 290.341 183.466 cv
290.609 183.004 290.743 182.337 290.743 181.465 cv
290.743 180.567 290.609 179.914 290.341 179.504 cv
290.046 179.055 289.657 178.828 289.175 178.821 cv
289.175 178.358 li
288.384 178.358 287.7 178.623 287.123 179.152 cv
286.46 179.756 286.128 180.5 286.128 181.385 cv
286.128 182.598 286.708 183.577 287.868 184.321 cv
286.754 184.549 286.198 185.109 286.198 186 cv
286.198 186.617 286.51 187.056 287.134 187.318 cv
287.556 187.492 288.27 187.605 289.275 187.659 cv
289.932 187.686 290.378 187.72 290.613 187.76 cv
290.854 187.8 291.098 187.88 291.347 188.002 cv
291.957 188.296 292.262 188.819 292.262 189.57 cv
292.262 190.234 292 190.757 291.478 191.139 cv
290.988 191.5 290.338 191.682 289.527 191.682 cv
288.501 191.682 287.723 191.44 287.194 190.958 cv
286.818 190.622 286.631 190.173 286.631 189.61 cv
286.631 189.128 286.791 188.645 287.113 188.162 cv
287.026 188.129 286.939 188.112 286.852 188.112 cv
286.51 188.112 286.235 188.236 286.027 188.484 cv
285.827 188.738 285.726 189.08 285.726 189.51 cv
285.726 190.166 285.974 190.713 286.47 191.148 cv
287.187 191.779 288.193 192.094 289.487 192.094 cv
290.653 192.093 291.571 191.836 292.242 191.32 cv
292.939 190.783 293.288 190.049 293.288 189.117 cv
293.287 188.152 292.952 187.425 292.282 186.936 cv
291.772 186.567 290.857 186.342 289.537 186.262 cv
288.679 186.215 288.132 186.171 287.898 186.131 cv
287.314 186.037 287.023 185.819 287.023 185.477 cv
287.023 184.948 287.657 184.66 288.923 184.613 cv
289.741 184.579 290.395 184.418 290.884 184.13 cv
291.327 183.869 291.672 183.5 291.92 183.024 cv
292.174 182.548 292.302 182.018 292.302 181.435 cv
292.302 180.825 292.145 180.242 291.829 179.685 cv
292.111 179.337 292.369 179.162 292.604 179.162 cv
292.745 179.163 292.882 179.29 293.016 179.545 cv
293.163 179.819 293.338 179.957 293.539 179.957 cv
293.693 179.957 293.82 179.896 293.921 179.776 cv
294.028 179.648 294.082 179.491 294.082 179.303 cv
294.082 179.062 293.995 178.861 293.82 178.7 cv
293.646 178.533 293.428 178.449 293.167 178.449 cv
292.637 178.449 292.114 178.774 291.598 179.424 cv
290.988 178.714 290.195 178.358 289.189 178.358 cv
289.189 178.821 li
cp
@
145.126 180.558 mo
144.113 181.315 143.427 181.93 143.099 182.403 cv
142.771 182.871 142.607 183.449 142.607 184.139 cv
142.607 184.941 142.843 185.628 143.316 186.201 cv
143.901 186.908 144.621 187.261 145.478 187.261 cv
146.48 187.261 147.418 186.713 148.291 185.617 cv
149.076 186.713 149.942 187.261 150.888 187.261 cv
151.35 187.261 151.75 187.125 152.09 186.852 cv
152.429 186.574 152.655 186.195 152.766 185.717 cv
152.424 185.717 li
152.168 186.223 151.809 186.477 151.347 186.477 cv
150.785 186.477 150.262 186.159 149.777 185.525 cv
149.555 185.236 149.318 184.89 149.068 184.49 cv
149.285 184.178 149.505 183.73 149.727 183.146 cv
150.061 182.255 150.37 181.632 150.654 181.276 cv
150.943 180.914 151.336 180.65 151.831 180.483 cv
151.831 180.099 li
148.592 180.099 li
148.592 180.483 li
149.377 180.589 149.769 180.959 149.769 181.593 cv
149.769 181.905 149.683 182.294 149.51 182.762 cv
149.343 183.223 149.121 183.675 148.843 184.114 cv
148.036 182.839 147.187 181.535 146.296 180.199 cv
146.054 179.882 li
145.664 179.325 145.397 178.888 145.253 178.571 cv
145.108 178.248 145.036 177.936 145.036 177.636 cv
145.036 177.196 145.178 176.843 145.462 176.576 cv
145.706 176.348 146.013 176.234 146.38 176.234 cv
146.78 176.234 147.106 176.375 147.357 176.659 cv
147.613 176.938 147.741 177.302 147.741 177.753 cv
147.74 178.515 147.194 179.224 146.07 179.88 cv
146.323 180.187 li
147.091 179.748 147.621 179.342 147.966 178.947 cv
148.311 178.552 148.484 178.128 148.484 177.678 cv
148.483 177.166 148.277 176.734 147.866 176.384 cv
147.437 176.016 146.931 175.833 146.346 175.833 cv
145.756 175.833 145.253 176.056 144.836 176.501 cv
144.423 176.941 144.218 177.472 144.218 178.095 cv
144.218 178.813 144.53 179.634 145.126 180.558 cv
145.343 180.9 li
144.853 181.279 144.463 181.696 144.201 182.152 cv
143.939 182.609 143.809 183.073 143.809 183.546 cv
143.809 183.92 143.889 184.304 144.051 184.698 cv
144.218 185.088 144.443 185.427 144.727 185.717 cv
145.183 186.19 145.668 186.427 146.18 186.427 cv
146.87 186.427 147.501 186.043 148.075 185.274 cv
146.973 183.432 146.057 181.974 145.328 180.9 cv
145.126 180.558 li
ef
145.126 180.558 mo
144.113 181.315 143.427 181.93 143.099 182.403 cv
142.771 182.871 142.607 183.449 142.607 184.139 cv
142.607 184.941 142.843 185.628 143.316 186.201 cv
143.901 186.908 144.621 187.261 145.478 187.261 cv
146.48 187.261 147.418 186.713 148.291 185.617 cv
149.076 186.713 149.942 187.261 150.888 187.261 cv
151.35 187.261 151.75 187.125 152.09 186.852 cv
152.429 186.574 152.655 186.195 152.766 185.717 cv
152.424 185.717 li
152.168 186.223 151.809 186.477 151.347 186.477 cv
150.785 186.477 150.262 186.159 149.777 185.525 cv
149.555 185.236 149.318 184.89 149.068 184.49 cv
149.285 184.178 149.505 183.73 149.727 183.146 cv
150.061 182.255 150.37 181.632 150.654 181.276 cv
150.943 180.914 151.336 180.65 151.831 180.483 cv
151.831 180.099 li
148.592 180.099 li
148.592 180.483 li
149.377 180.589 149.769 180.959 149.769 181.593 cv
149.769 181.905 149.683 182.294 149.51 182.762 cv
149.343 183.223 149.121 183.675 148.843 184.114 cv
148.036 182.839 147.187 181.535 146.296 180.199 cv
146.054 179.882 li
145.664 179.325 145.397 178.888 145.253 178.571 cv
145.108 178.248 145.036 177.936 145.036 177.636 cv
145.036 177.196 145.178 176.843 145.462 176.576 cv
145.706 176.348 146.013 176.234 146.38 176.234 cv
146.78 176.234 147.106 176.375 147.357 176.659 cv
147.613 176.938 147.741 177.302 147.741 177.753 cv
147.74 178.515 147.194 179.224 146.07 179.88 cv
146.323 180.187 li
147.091 179.748 147.621 179.342 147.966 178.947 cv
148.311 178.552 148.484 178.128 148.484 177.678 cv
148.483 177.166 148.277 176.734 147.866 176.384 cv
147.437 176.016 146.931 175.833 146.346 175.833 cv
145.756 175.833 145.253 176.056 144.836 176.501 cv
144.423 176.941 144.218 177.472 144.218 178.095 cv
144.218 178.813 144.53 179.634 145.126 180.558 cv
145.343 180.9 li
144.853 181.279 144.463 181.696 144.201 182.152 cv
143.939 182.609 143.809 183.073 143.809 183.546 cv
143.809 183.92 143.889 184.304 144.051 184.698 cv
144.218 185.088 144.443 185.427 144.727 185.717 cv
145.183 186.19 145.668 186.427 146.18 186.427 cv
146.87 186.427 147.501 186.043 148.075 185.274 cv
146.973 183.432 146.057 181.974 145.328 180.9 cv
145.126 180.558 li
cp
@
1.3168 lw
3.86371 ml
270.087 112.436 mo
260.873 105.968 252.285 93.8297 242.179 93.8297 cv
231.971 93.8297 214.29 121.879 200.256 121.879 cv
176.568 121.879 170.176 47.15 149.214 48.635 cv
128.253 47.15 120.77 121.879 97.0828 121.879 cv
83.048 121.879 65.3672 93.8297 55.1594 93.8297 cv
38.5668 93.8297 26.1121 126.553 8.22813 113.173 cv
1 /1 /CSD get_res sepcs
1 sep
@
242.734 103.061 mo
242.179 103.048 li
231.971 103.048 214.29 131.098 200.256 131.098 cv
176.568 131.098 170.176 56.369 149.214 57.854 cv
128.253 56.369 120.77 131.098 97.0828 131.098 cv
83.048 131.098 65.3672 103.048 55.1594 103.048 cv
38.5668 103.048 26.1121 135.771 8.22813 122.391 cv
@
260.304 113.268 mo
254.508 107.988 248.652 103.009 242.179 103.009 cv
@
250.036 119.615 mo
250.02 136.897 li
250.02 143.769 250.095 150.544 250.246 152.801 cv
250.446 155.058 250.871 156.915 251.525 158.368 cv
252.879 161.076 256.088 162.407 261.154 162.355 cv
264.088 162.355 li
264.088 165.816 li
221.732 165.816 li
221.732 162.355 li
224.065 162.355 li
229.129 162.407 232.338 161.076 233.695 158.368 cv
234.346 156.915 234.745 155.06 234.898 152.801 cv
235.098 150.494 235.197 143.719 235.199 136.897 cv
235.199 86.491 li
235.199 79.72 235.098 75.258 234.898 73.1 cv
234.748 70.944 234.32 69.164 233.62 67.758 cv
232.916 66.355 231.938 65.452 230.686 65.05 cv
229.43 64.598 226.999 64.373 223.388 64.373 cv
221.732 64.373 li
221.732 60.912 li
232.717 60.461 li
240.891 60.11 248.163 59.936 254.534 59.934 cv
262.005 59.934 267.923 60.362 272.289 61.213 cv
276.652 62.066 280.388 63.521 283.498 65.576 cv
290.97 70.593 294.706 77.94 294.708 87.62 cv
294.708 98.2039 291.022 105.927 283.649 110.791 cv
279.083 113.8 271.085 115.305 259.65 115.305 cv
250.049 115.305 li
250.049 111.544 li
256.34 111.544 li
260.501 111.544 263.635 111.268 265.743 110.716 cv
267.9 110.114 269.879 109.012 271.687 107.406 cv
276.352 103.395 278.684 97 278.684 88.221 cv
278.684 78.994 276.525 72.324 272.213 68.21 cv
270.408 66.505 268.302 65.327 265.894 64.673 cv
263.487 63.973 260.226 63.623 256.114 63.621 cv
253.706 63.621 251.675 63.721 250.02 63.921 cv
250.036 119.615 li
1 /0 /CSD get_res sepcs
1 sep
f
99.6992 165.816 mo
99.6992 128.156 li
103.084 128.156 li
104.589 136.785 106.82 145.822 109.78 150.536 cv
114.845 158.661 121.589 162.723 130.018 162.723 cv
136.337 162.723 141.378 160.518 145.139 156.103 cv
148.349 152.341 149.952 147.879 149.954 142.712 cv
149.954 136.693 147.646 131.603 143.033 127.44 cv
140.374 125.032 134.48 121.623 125.354 117.208 cv
116.375 112.845 110.232 108.632 106.921 104.569 cv
102.558 99.2039 100.376 92.858 100.376 85.535 cv
100.376 78.214 102.657 72.12 107.222 67.254 cv
111.786 62.389 117.677 59.959 124.902 59.956 cv
129.266 59.956 133.102 60.809 136.413 62.514 cv
139.723 64.221 143.007 67.028 146.268 70.94 cv
148.375 68.232 149.909 64.122 149.909 60.513 cv
152.813 60.513 li
152.813 94.3316 li
149.594 94.3316 li
148.751 86.297 149.313 79.831 143.033 72.896 cv
137.815 67.134 132.625 63.57 125.805 63.567 cv
121.389 63.567 117.779 64.921 114.971 67.63 cv
111.91 70.639 110.382 74.551 110.382 79.366 cv
110.382 84.03 111.91 88.018 114.971 91.328 cv
118.03 94.5887 123.722 98.3246 132.049 102.538 cv
139.121 106.148 143.959 108.759 146.569 110.362 cv
149.176 111.968 151.381 113.747 153.189 115.703 cv
158.305 121.071 160.863 128.093 160.863 136.768 cv
160.863 145.998 158.079 153.32 152.512 158.736 cv
147.246 163.904 140.374 166.483 131.899 166.485 cv
121.615 166.485 113.14 162.148 106.47 153.47 cv
104.58 155.786 103.382 160.339 103.084 165.816 cv
99.6992 165.816 li
f
194.017 86.491 mo
194.017 137.679 li
194.017 144.502 194.093 149.065 194.243 151.371 cv
194.443 153.628 194.868 156.915 195.522 158.368 cv
196.876 161.076 200.111 162.407 205.227 162.355 cv
207.785 162.355 li
207.785 165.816 li
165.429 165.816 li
165.429 162.355 li
168.062 162.355 li
173.126 162.407 176.336 161.076 177.692 158.368 cv
178.343 156.915 178.743 153.63 178.896 151.371 cv
179.095 149.114 179.194 144.551 179.196 137.679 cv
179.196 86.491 li
179.196 79.72 179.095 75.258 178.896 73.1 cv
178.745 70.944 178.317 69.164 177.616 67.758 cv
176.914 66.355 175.91 65.452 174.607 65.05 cv
173.352 64.598 170.945 64.373 167.385 64.373 cv
165.429 64.373 li
165.429 60.912 li
207.785 60.912 li
207.785 64.373 li
205.829 64.373 li
202.267 64.373 199.834 64.598 198.531 65.05 cv
197.276 65.452 196.298 66.355 195.597 67.758 cv
194.894 69.164 194.443 70.944 194.243 73.1 cv
194.093 75.258 194.017 79.72 194.017 86.491 cv
f
81.5254 128.156 mo
84.4594 128.156 li
84.4594 165.816 li
81.5254 165.816 li
81.2074 160.767 79.752 154.587 77.0867 151.213 cv
68.8113 161.395 58.4289 166.483 45.9406 166.485 cv
31.9965 166.485 20.7871 161.444 12.3117 151.363 cv
4.43555 141.985 .5 129.898 .5 115.102 cv
.5 100.107 4.31094 87.268 11.9355 76.582 cv
15.5961 71.568 20.3355 67.557 26.1543 64.545 cv
32.0719 61.486 38.6172 59.959 45.7902 59.956 cv
51.9074 59.956 57.7754 61.336 63.3945 64.094 cv
69.0109 66.802 73.5742 70.488 77.0867 75.153 cv
79.0922 70.992 80.5285 65.468 80.6977 60.513 cv
84.4125 60.513 li
84.4594 94.3316 li
81.5254 94.3316 li
80.1711 84.852 77.8625 83.856 74.6039 78.388 cv
71.8441 73.775 68.0332 70.164 63.1688 67.555 cv
58.5535 65.098 53.8141 63.871 48.9496 63.868 cv
42.1789 63.868 36.3109 66.151 31.3453 70.714 cv
26.5305 75.078 22.9688 81.698 20.6625 90.576 cv
18.8051 97.7484 17.8789 105.749 17.8789 114.575 cv
17.8789 129.523 20.9633 141.409 27.1324 150.235 cv
29.7398 153.947 33.05 156.881 37.0629 159.037 cv
41.0738 161.144 45.2609 162.197 49.627 162.197 cv
55.8949 162.197 61.8637 160.191 67.5324 156.178 cv
70.993 153.721 74.0023 149.71 76.5602 144.141 cv
79.1676 138.574 80.8227 134.627 81.5254 128.156 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 123 CVC)
%%+ (PANTONE 540 CVC)
%%CMYKCustomColor: 0 0.3050 0.9400 0 (PANTONE 123 CVC)
%%+ 1 0.4700 0 0.4700 (PANTONE 540 CVC)
%%RGBCustomColor: 
%%EOF
